<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Ftp</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.Ftp">
            <summary>
            Provides essential methods to transfer files and directories directly from your .NET application to FTP and FTP/SSL servers.
            </summary>
            <remarks>Methods and properties of this class are thread-safe.</remarks>
        </member>
        <member name="F:ComponentPro.Net.Ftp.DefaultPort">
            <summary>
            Default FTP port (21).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Ftp.DefaultImplicitSslPort">
            <summary>
            Default FTP/Implicit SSL port 990.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetSocketFactory(ComponentPro.Net.ISocketFactory)">
            <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
            <param name="factory">Socket factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync#1, KeepAlive_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.KeepAliveAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to send a command or data packet to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/KeepAlive_TaskAsync#2, KeepAlive_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetServerTimeDifferenceCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.TimeSpan})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetServerTimeDifferenceCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetServerTimeDifferenceAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.TimeSpan},System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetTimeDiff_TaskAsync#1, GetTimeDiff_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetServerTimeDifferenceAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetTimeDiff_TaskAsync#2, GetTimeDiff_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetDownloadStreamCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.IO.Stream})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetDownloadStreamCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync#Seek_1, GetDownloadStream_Async#Seek_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync#Seek_2, GetDownloadStream_Async#Seek_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStreamAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync#Path_1, GetDownloadStream_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStreamAsync(System.String,System.Object)">
            <summary>
            Asynchronously returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetDownloadStream_TaskAsync#Path_2, GetDownloadStream_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetUploadStreamCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.IO.Stream})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetUploadStreamCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync#Seek_1, GetUploadStream_Async#Seek_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStreamAsync(System.String,System.IO.SeekOrigin,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync#Seek_2, GetUploadStream_Async#Seek_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStreamAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.IO.Stream},System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync#Path_1, GetUploadStream_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStreamAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/GetUploadStream_TaskAsync#Path_2, GetUploadStream_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetConnectionState(System.Boolean@,System.Int32@)">
            <summary>
            Checks to see if the current connection is still active and returns error if any.
            </summary>
            <param name="connected">Indicates whether the connection is still active.</param>
            <param name="nativeErrorCode">The output error code.</param>
            <returns>The exception object if encounters any error.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnListRawNameCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String[]})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ListRawNameCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containg the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawNameAsync(System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Ftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawNameAsync(System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Ftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)"/> operation.
            Retrieves the list of files and directories in the specified directory using a raw text format.
            </summary>
            <param name="path">The path of the directory, or null for current directory.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawNameAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Ftp.ListRawName"/> operation.
            Retrieves the list of files and directories in the current directory using a raw text format.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawNameAsync(System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.Net.Ftp.ListRawName"/> operation.
            Retrieves the list of files and directories in the current directory using a raw text format.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/> 
        </member>
        <member name="M:ComponentPro.Net.Ftp.MultiPartDownload(System.String,System.String,System.Int32,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
            <example source="MultiPartDownload#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MultiPartDownload(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int32,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
            <example source="MultiPartDownload#Offset"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MultiPartDownload(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int32,System.Boolean,ComponentPro.Net.MultiPartDownloadErrorEventHandler,ComponentPro.Net.MultiPartDownloadCompletedEventHandler)">
            <summary>
            Downloads a file on the server and writes to the specified local file using multiple threads.
            </summary>
            <param name="remotePath">The remote file path and name to download.</param>
            <param name="localPath">The local file path and name to store the downloaded data.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="parts">The number of threads used to download the remote file.</param>
            <param name="waitForCompletion">A boolean value indicating whether to wait until the download operation completes before giving control to the caller. <c>true</c> to block the caller's process until the download completes; otherwise, <c>false</c> to immediately returns control to the caller's process. When the download completes, <paramref name="downloadCompletedEventHandler"/> will be called.</param>
            <param name="errorHandler">The error handler that is called whenever an error occurs, giving an opportunity to display the error and retry downloading.</param>
            <param name="downloadCompletedEventHandler">The callback function that is called when the download operation completes.</param>
            <returns>The download result.</returns>
            <example source="MultiPartDownload#Wait"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnTransferConfirm(ComponentPro.IO.TransferConfirmEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferConfirmEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReconnectionErrorChecking(ComponentPro.Net.ReconnectionErrorCheckingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ReconnectionErrorChecking"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectionErrorCheckingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReconnecting(ComponentPro.Net.ReconnectingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.Reconnecting"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReconnected(ComponentPro.Net.ReconnectedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.Reconnected"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.ReconnectedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.IsFatalError(System.Exception)">
            <summary>
            Returns a boolean value indicating whether the specified error indicates that the client should reconnect to the server.
            </summary>
            <param name="ex">The error to check.</param>
            <returns><c>true</c> to indicates that the client should reconnect to the server; otherwise, <c>false</c>.</returns>
            <remarks>
            This method fires the <see cref="E:ComponentPro.Net.Ftp.ReconnectionErrorChecking"/> event to let you manually check if the component needs to reconnect when it encounters specific errors.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to the directory to create.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The path to the newly created directory.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetCurrentDirectorySync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path to the new directory.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FileExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if the path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of the path.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DirectoryExistsSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="path">The path to test.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the specified directory exists; otherwise, false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteFileSync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The path to the file to delete.</param>
            <param name="item">The <see cref="T:ComponentPro.IO.ProgressFileItem"/> object.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteDirectorySync(System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Deletes the specified empty directory.
            </summary>
            <param name="path">The path to the directory.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetItemInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory.
            </summary>
            <param name="path">The name of the file or directory to get information.</param>
            <param name="parts">Specifies what information of the file to retrive.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>An <see cref="T:ComponentPro.IO.FileInfoBase"/> object containing information of the specified file or directory, 
            or a null reference (Nothing in VB.NET) if the specified file or directory not found.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetLastWriteTimeSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetLastWriteTimeSync(System.String,System.DateTime,System.ComponentModel.AsyncOperation)">
            <summary>
            Sets the date and time at which the specified file was last written.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="time">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileLengthSync(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the size of the specified file, in bytes.
            </summary>
            <param name="path">The path to the file to get size.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The length of the file.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectorySync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.IO.ListDirFlags,System.ComponentModel.AsyncOperation)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition. This method returns the list of files and subdirectories in the first level of the specified directory only. To scan subdirectories deeply, use the <see cref="M:ComponentPro.IO.FileSystem.Search(System.String,System.Boolean,ComponentPro.IO.SearchConditionFileTypes,ComponentPro.IO.FileFoundDelegate)"/> method.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <param name="basePath">The base path for the <paramref name="searchCondition"/>.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="flags">The listing flags.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of files or directories found.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.RenameSync(System.String,System.String,ComponentPro.IO.ProgressFileItem,System.ComponentModel.AsyncOperation)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
            <param name="item">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="asyncOp">The async operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromFileToStreamSync(System.Boolean,ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="forComparison">true to indicate that this transfer is for a file comparison; otherwise, false.</param>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="outputStream">The destination file stream.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The number of bytes transferred.</returns>        
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromStreamToFileSync(ComponentPro.IO.ProgressFileItem,System.IO.Stream,System.ComponentModel.AsyncOperation)">
            <summary>
            This allow you to copy data from a stream or a <paramref name="currentProgressFileItem"/> to a file on this system.
            </summary>
            <param name="currentProgressFileItem">The current <see cref="T:ComponentPro.IO.ProgressFileItem"/>.</param>
            <param name="sourceStream">The source stream.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetCurrentDirectorySync(System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the current directory.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>The current directory.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileChecksumSync(ComponentPro.IO.FileChecksumType,System.String,System.Int64,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns the calculated checksum of the specified type.
            </summary>
            <param name="type">The checksum type.</param>
            <param name="path">The path to the file to calculate checksum.</param>
            <param name="offset">The file offset.</param>
            <param name="length">The number of bytes to calculate.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFile(System.IO.Stream,System.String)">
            <summary>
            Resumes uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred.</returns>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceStream"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading file.</exception>
            <example source="ResumeUploadFile#Stream"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFile(System.String,System.String)">
            <summary>
            Resumes uploading the content of the local file to the previously interrupted remote file.
            </summary>
            <returns>The number of bytes transferred, -1 if remote file size is greater than the local file size, or 0 if no need to resume upload because remote file size is equal to local file size.</returns>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading file.</exception>
            <example source="ResumeUploadFile#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFile(System.String,System.String)">
            <summary>
            Resumes download the content of the remote file to the previously interrupted local file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while downloading file.</exception>
            <example source="ResumeDownloadFile"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFile(System.String,System.String,System.Int64@)">
            <summary>
            Resumes download the content of the remote file to the previously interrupted local file.
            </summary>
            <returns>The number of bytes transferred, -1 if local file size is greater than the remote file size, or 0 if no need to resume download because remote file size is equal to local file size.</returns>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="remoteSize">Returns remote file size.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while downloading file.</exception>
            <example source="ResumeDownloadFile"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnResumeUploadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ResumeUploadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceStream"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains invalid path characters.</exception>
            <example source="TaskAsync/ResumeUploadFile_TaskAsync#Stream_1, ResumeUploadFile_Async#Stream_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ResumeUploadFile_TaskAsync#Stream_2, ResumeUploadFile_Async#Stream_2"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceStream"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains invalid path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ResumeUploadFile_TaskAsync#Path_1, ResumeUploadFile_Async#Path_1"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ResumeUploadFile_TaskAsync#Path_2, ResumeUploadFile_Async#Path_2"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnResumeDownloadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ResumeDownloadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Resumes download the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ResumeDownloadFile_TaskAsync#Path_1,ResumeDownloadFile_Async#Path_1"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Resumes download the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userToken">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\ResumeDownloadFile_TaskAsync#Path_2,ResumeDownloadFile_Async#Path_2"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> or <paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains invalid path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.IO.Stream,System.String)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file on the server.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the content in the stream to the server.</exception>
            <example source="UploadFile#Stream"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.String,System.String)">
            <summary>
            Uploads a file to the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <returns>Number of bytes transfered.</returns>
            <example source="UploadFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
            <example source="UploadFile#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file at the specified offset.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
            <example source="UploadFile#Stream_Offset_Length"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Uploads from the current position in the specified source stream and writes to the destination file at the specified offset.
            </summary>
            <param name="sourceStream">Source stream to read from.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
            <example source="UploadFile#Stream_Offset"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Uploads the specified part of the local file to the specified offset of the file on the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/>, <paramref name="localOffset"/>, or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
            <example source="UploadFile#Path_Offset_Length"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads the specified part of the local file to the specified offset of the file on the server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the remote file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="localOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
            <example source="UploadFile#Path_Offset"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.String)">
            <summary>
            Download a file from an the server, overriding it if it already exists.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">Path for the local file to create. Existing file will be overriden.</param>
            <returns>Number of bytes transfered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCanceled</see>.</exception>
            <example source="DownloadFile#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Downloads the specified part of the remote file to the specified offset of the local file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemOperationCanceledException">User has canceled the operation.</exception>
            <example source="DownloadFile#Path_Offset"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Downloads the specified part of the remote file to the specified offset of the local file.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemOperationCanceledException">User has canceled the operation.</exception>
            <example source="DownloadFile#Path_Offset_Length"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Downloads at the specified offset and writes to the destination Stream. 
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> is less than zero.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCanceled</see>.</exception>
            <example source="DownloadFile#Stream_Offset"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads at the specified offset and writes to the destination Stream. 
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start. The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer all data until an end is reached.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>If the local file does not exist, it is created.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remoteOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCanceled</see>.</exception>
            <example source="DownloadFile#Stream_Offset_Length"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.IO.Stream)">
            <summary>
            Downloads a file on the server and writes to the destination Stream.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="outputStream">Stream to write file data to.</param>
            <returns>Number of bytes transfered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="outputStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while downloading the file on the server.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="T:ComponentPro.IO.FileSystemExceptionStatus">OperationCanceled</see>.</exception>
            <example source="DownloadFile#Stream"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Stream_1,UploadFile_Async#Stream_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Stream_2,UploadFile_Async#Stream_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Path_1,UploadFile_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Path_2,UploadFile_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Stream_Offset_Length_1,UploadFile_Async#Stream_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Stream_Offset_Length_2,UploadFile_Async#Stream_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Path_Offset_Length_1,UploadFile_Async#Path_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\UploadFile_TaskAsync#Path_Offset_Length_2,UploadFile_Async#Path_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDownloadFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DownloadFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/>.</remarks>
            <example source="TaskAsync\DownloadFile_TaskAsync#Stream_1,DownloadFile_Async#Stream_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/>.</remarks>
            <example source="TaskAsync\DownloadFile_TaskAsync#Stream_2,DownloadFile_Async#Stream_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync#Path_1,DownloadFile_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync#Path_2,DownloadFile_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync#Path_Offset_Length_1,DownloadFile_Async#Path_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer until the end is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync#Path_Offset_Length_2,DownloadFile_Async#Path_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents FTP RETR command.</p>
            </remarks>
            <example source="TaskAsync\DownloadFile_TaskAsync#Stream_Offset_Length_1,DownloadFile_Async#Stream_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFileAsync(System.String,System.IO.Stream,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\DownloadFile_TaskAsync#Stream_Offset_Length_2,DownloadFile_Async#Stream_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads the content of the specified remote file or directory to the destination directory using multiple threads.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the destination folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>("", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="destinationFileSystem">The destination file system that receives the files from the server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="DownloadFiles#Threads-FileSystem-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads the content of the specified remote file or directory to the specified local directory using multiple threads.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>("/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="DownloadFiles#Threads-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads the remote files or directories on the list to the specified local directory using multiple threads.
            </summary>
            <param name="remoteFilesToTransfer">The list of files and directories to download,  
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="DownloadFiles#Threads-FileList"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads the specified remote file or directory to the local directory using multiple threads.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="DownloadFiles#Threads-Path_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Downloads the content of the specified remote file or directory hierarchy to the local directory simultaneously using multiple threads.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="DownloadFiles#Threads-Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads the content of the specified remote file or directory hierarchy to the destination directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the destination folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)"/>("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)"/>("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)"/>("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles#FileSystem-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote file or directory hierarchy to the specified local directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>("/MyDir/*.txt", true, null, "/ZipDir" ...)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles#Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of remote files and directories to download.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Download(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>). This parameter cannot be a null reference.</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles#FileList"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads the content of the specified remote file or directory to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory on the disk file system to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="DownloadFiles#Path_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Downloads the content of the specified remote file or directory to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">A boolean value indicating whether to includes the source directory and all its subdirectories in the transfer operation.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <example source="DownloadFiles#Path_ExistsResolveAction"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Downloads the content of the specified remote directory to the local directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c><see cref="M:ComponentPro.Net.Ftp.Download(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction)"/>("/MyDir/*.txt", true, "/ZipDir", true)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">A boolean value indicating whether to includes the source directory and all its subdirectories in the transfer operation.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <example source="DownloadFiles#Path_ExistsResolveAction_IncludeBase"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Downloads the specified remote file or directory hierarchy on the server to the specified local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition is a combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to download all files and subdirectories. The final search condition is a combination of this parameter and the masks, if found, in the <paramref name="localPath"/> parameter.</param>
            <example source="DownloadFiles#Path_SearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Download(System.String,System.String)">
            <summary>
            Downloads the specified remote file or directory hierarchy on the server to the specified local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote file or directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <example source="DownloadFiles#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be uploaded to the server. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(zipSystem, "MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(zipSystem, "", false, new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(zipSystem, "", false, new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="UploadFiles#Threads-FileSystem-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads the specified local file or directory to the specified remote directory on the server simultaneously using multiple threads.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list must comprise file paths in <see cref="T:System.String"/> and/or <see cref="T:ComponentPro.IO.FileInfoBase"/> instances. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="UploadFiles#Threads-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files in the specified list to the specified remote directory using multiple threads.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)"/>(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="UploadFiles#Threads-FileList"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory to the remote directory using multiple threads.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="UploadFiles#Threads-Path_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server simulaneously using multiple threads.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory for storing files.</param>
            <param name="threads">The number of threads used for the simultaneous file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method blocks the caller process's execution until all threads have completed; otherwise, this method immediately returns the control to the caller process.</param>
            <returns>A <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="UploadFiles#Threads-Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Uploads the specified local file or directory hierarchy that match the specified search condition to the specified remote directory on the server.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition is the combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <example source="UploadFiles#Path_SearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be uploaded to the server.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <example source="UploadFiles#Path_ExistsResolveAction"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode)"/>("MyDir/*.txt", true, "/RemoteDir", true, ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">A boolean value indicating whether to includes the source directory and all its subdirectories in the transfer operation.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <example source="UploadFiles#Path_ExistsResolveAction_IncludeBase"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder and its subfolders that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "c:\mydir" and its subfolders will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store the uploaded files.</param>
            <example source="UploadFiles#Path"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads the specified source file or directory hierarchy on the specified source file system to the specified remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path and name of the file or directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be uploaded to the server. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(zipSystem, "MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(zipFileSystem, "", false, new string[] {@"/file1", @"/folder/file2", @"dir1" }, ...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Upload(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(zipFileSystem, "", false, new object[] {@"/temp/file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles#FileSystem-Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <see cref="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and subdirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(null, false, new string[] {@"d:\file1", @"c:\folder\file2", @"d:\dir1" }, ...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(null, false, new object[] {@"d:\temp\file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles#Path_FileList_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads local files or directories on the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code><see cref="M:ComponentPro.Net.Ftp.Upload(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions)"/>(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="remotePath">The path of the remote directory to store the uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles#FileList"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Upload(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads the specified local file or directory hierarchy to the specified remote directory on the server.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local file or directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator character like '/' or '\', the containing directory will also be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself will be uploaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <example source="UploadFiles#Path_Options"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDownloadCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DownloadCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> parameters of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_Options_1,UploadFiles_Async#Path_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_Options_2,UploadFiles_Async#Path_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be uploaded to the server.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_Options_1,UploadFiles_Async#Path_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be uploaded to the server.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_Options_2,UploadFiles_Async#Path_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(null, false, new string[] {@"d:\file1", @"c:\folder\file2", @"d:\dir1" }, ...)</code> or <code>UploadAsync(null, false, new object[] {@"d:\temp\file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_FileList_Options_1,UploadFiles_Async#Path_FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            When the parameter <paramref name="localFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="localFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="localPath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(null, false, new string[] {@"d:\file1", @"c:\folder\file2", @"d:\dir1" }, ...)</code> or <code>UploadAsync(null, false, new object[] {@"d:\temp\file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_FileList_Options_2,UploadFiles_Async#Path_FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition is the combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_SearchCondition_1,UploadFiles_Async#Path_SearchCondition_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously uploads files from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition is the combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_SearchCondition_2,UploadFiles_Async#Path_SearchCondition_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads all files and subdirectories from the specified local directory to the remote directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            If this value ends with a directory separator like '/' or '\', the containing directory is to be uploaded. For example, if "c:\folder\" is used, files and subdirectories of "folder" directory and itself are uploaded; the destination directory contains "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync,UploadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the remote directory.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_ExistsResolveAction_IncludeBase_1,UploadFiles_Async#Path_ExistsResolveAction_IncludeBase_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,System.Object)">
            <summary>
            Asynchronously uploads all files from the specified local directory to the remote directory.
            </summary>
            <param name="localPath">The path and name of the local directory where the files will be uploaded to the server. 
            This parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "c:\mydir\*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the .DAT, .CS, or .VB extension in "c:\mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync("MyDir/*.txt", true, "/RemoteDir", true) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_ExistsResolveAction_IncludeBase_2,UploadFiles_Async#Path_ExistsResolveAction_IncludeBase_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code>UploadAsync(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code>Upload(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#FileList_Options_1,UploadFiles_Async#FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads local files or directories in the list to the specified remote directory.
            </summary>
            <param name="localFilesToTransfer">The list of files and directories to upload. 
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects (e.g. <code>UploadAsync(new string[] {"c:\data\file1", "c:\text\doc.txt", "c:\dir1" }, ...)</code> or <code>Upload(new object[] {"file1", fileInfo1, fileInfo2 }, ...)</code>). This cannot be null or empty.</param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#FileList_Options_2,UploadFiles_Async#FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be uploaded to the server. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync(zipSystem, "MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(zipFileSystem, "", false, new string[] {@"/file1", @"/folder/file2", @"dir1" }, ...)</code> or <code>UploadAsync(zipFileSystem, "", false, new object[] {@"/temp/file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#FileSystem-Path_FileList_Options_1,UploadFiles_Async#FileSystem-Path_FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadAsync(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourcePath">The path and name of the directory on the <paramref name="sourceFileSystem">source file system</paramref> where the files will be uploaded to the server. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are uploaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be uploaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be uploaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be uploaded.
            If no masks specified, the whole content of the local directory should be uploaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: UploadAsync(zipSystem, "MyDir/*.txt", true, null, "/RemoteDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "RemoteDir" and all files and dirs within "MyDir" are copied to "RemoteDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "RemoteDir", only files and subdirectories within "MyDir" are copied to "RemoteDir".</param>
            <param name="sourceFilesToTransfer">The list of files and directories to upload, 
            or a null reference to upload files in the <paramref name="sourcePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>UploadAsync(zipFileSystem, "", false, new string[] {@"/file1", @"/folder/file2", @"dir1" }, ...)</code> or <code>UploadAsync(zipFileSystem, "", false, new object[] {@"/temp/file1", fileInfo1, fileInfo2 }, ...)</code>)
            </param>
            <param name="remotePath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\UploadFiles_TaskAsync#FileSystem-Path_FileList_Options_2,UploadFiles_Async#FileSystem-Path_FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_Options_1,DownloadFiles_Async#Path_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the destination directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_Options_2,DownloadFiles_Async#Path_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">A boolean value indicating whether to includes the source directory and all its subdirectories in the transfer operation.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_Options_1,DownloadFiles_Async#Path_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the destination directory.
            This method only uploads the items in the specified directory if the <paramref name="localPath"/> parameter does not end with a directory separator (e.g. '\' or '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="localPath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">A boolean value indicating whether to includes the source directory and all its subdirectories in the transfer operation.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_Options_2,DownloadFiles_Async#Path_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of remote files and directories to download.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>DownloadAsync(new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>DownloadAsync(new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>). This parameter cannot be a null reference.</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#FileList_Options_1,DownloadFiles_Async#FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronous downloads files or directories in the specified list to the specified local directory.
            </summary>
            <param name="remoteFilesToTransfer">The list of remote files and directories to download.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>DownloadAsync(new string[] {"/dir/file1", "file2", "dir1" }...)</code> or <code>DownloadAsync(new object[] {"/dir/file1", fileInfo2, dirInfo1 }...)</code>). This parameter cannot be a null reference.</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#FileList_Options_2,DownloadFiles_Async#FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the specified destination local directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>Download("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code>Download("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_FileList_Options_1,DownloadFiles_Async#Path_FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">options parameter</paramref> to the specified destination local directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>Download("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code>Download("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_FileList_Options_2,DownloadFiles_Async#Path_FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition is a combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_SearchCondition_1,DownloadFiles_Async#Path_SearchCondition_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search condition to the local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition is a combination of the masks, if found, in the <paramref name="localPath"/> and the <paramref name="searchCondition"/> parameters.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_SearchCondition_2,DownloadFiles_Async#Path_SearchCondition_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_1,DownloadFiles_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.String,System.Object)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory.
            This method only downloads the items in the specified directory if the <paramref name="remotePath"/> parameter does not end with a directory separator (e.g. '/').
            To also create the directory in the destination, add a directory separator character at the end of <paramref name="remotePath">that parameter</paramref>.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            If this value ends with a directory separator like '/' or '\', the containing directory will also be downloaded. For example, if "/folder/" is used, files and subdirectories of "folder" directory and itself will be downloaded; the destination directory will contain "folder" directory and its contents.
            Attention: some servers may be case-sensitive!</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_2,DownloadFiles_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>Download("/MyDir/*.txt", true, "/ZipDir", true)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.String,System.Boolean,ComponentPro.IO.FileOverwriteMode,ComponentPro.IO.SymlinksResolveAction,System.Object)">
            <summary>
            Asynchronously downloads files in the specified remote directory that match the specified search pattern to the destination directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the local folder. 
            This parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: <c>Download("/MyDir/*.txt", true, "/ZipDir", true)</c> - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="localPath">The path of the local directory to receive files from the server.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync/DownloadFiles_TaskAsync, DownloadFiles_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the destination directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the destination folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>Download("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code>Download("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#FileSystem-Path_FileList_Options_1,DownloadFiles_Async#FileSystem-Path_FileList_Options_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadAsync(System.String,System.Boolean,System.Collections.IEnumerable,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Asynchronously downloads files from the specified remote directory to the destination directory.
            </summary>
            <param name="remotePath">The path and name of the remote directory where the files will be downloaded to the destination folder. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is a null reference, this parameter can include filtering masks to limit the files that are downloaded. For example, if ""(empty string) is specified, the entire contents of the current folder will be downloaded. 
            If "*.txt" is used, all the files in the current folder that have the .TXT extension will be downloaded. If "/mydir/*.dat;*.cs,*.vb" is used (masks are delimited by ',', ';', and '|' characters), files with the DAT, CS, or VB extension in "/mydir" will be downloaded.
            If no masks specified, the whole content of the remote directory should be downloaded. The final search condition depends on the <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchCondition"/> and <see cref="P:ComponentPro.IO.MultiFileOperationOptions.SearchConditionCombinedWithMasksInSourcePath"/> settings of the <paramref name="options"/> parameter.
            Attention: some servers may be case-sensitive!</param>
            <param name="includeBaseDirectory">Indicates whether the containing directory should also be created in the destination directory. 
            For example: Download("/MyDir/*.txt", true, null, zipSystem, "/ZipDir" ...) - if this parameter is <c>true</c>, 
            "MyDir" is created in "ZipDir" and all files and dirs within "MyDir" are copied to "ZipDir/MyDir"; 
            otherwise <c>false</c>, "MyDir" is not created in "ZipDir", only files and subdirectories within "MyDir" are copied to "ZipDir".</param>
            <param name="remoteFilesToTransfer">The list of files and directories to download, 
            or a null reference to transfer files in the <paramref name="remotePath"/> that match the search condition specified in the <paramref name="options"/> parameter.
            This list can contain <see cref="T:System.String"/> and <see cref="T:ComponentPro.IO.FileInfoBase"/> objects. (e.g. <code>Download("", false, new string[] {"file1", "file2", "dir1" }...)</code> or <code>Download("", false, new object[] {"file1", fileInfo1, fileInfo2 }...)</code>)
            </param>
            <param name="destinationFileSystem">The destination system that receives the files from the remote server.</param>
            <param name="destinationDirectoryPath">The path of the destination directory to receive files from the remote server.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An asynchronous reference to a <see cref="T:ComponentPro.IO.FileSystemTransferStatistics"/> object that contains transfer statictics and a list of processed files and directories.</returns>
            <example source="TaskAsync\DownloadFiles_TaskAsync#FileSystem-Path_FileList_Options_2,DownloadFiles_Async#FileSystem-Path_FileList_Options_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FileExistsSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <summary>
            Determines whether at least one file found that matches the specified search condition in the specified directory.
            </summary>
            <param name="directoryPath">The path of the directory containing files to check.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the caller has the required permissions and the directory contains at least one file that matches the specified search condition; otherwise, false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnAppendFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.AppendFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_1, AppendFile_Async#Stream_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_2, AppendFile_Async#Stream_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_1, AppendFile_Async#Stream_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_2, AppendFile_Async#Stream_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="sourceStream">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_1, AppendFile_Async#Stream_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.IO.Stream,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="sourceStream">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Stream_Offset_Length_2, AppendFile_Async#Stream_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync, AppendFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.String,System.String,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync, AppendFile_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.String,System.String,System.Int64,System.Int64,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Path_Offset_Length_1, AppendFile_Async#Path_Offset_Length_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFileAsync(System.String,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
            <example source="TaskAsync/AppendFile_TaskAsync#Path_Offset_Length_2, AppendFile_Async#Path_Offset_Length_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_1, ConnectAuthenticate_Async#User_Pass_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_2, ConnectAuthenticate_Async#User_Pass_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AuthenticateAsync(System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="account">Account for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_Account_1, ConnectAuthenticate_Async#User_Pass_Account_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AuthenticateAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="account">Account for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_Account_2, ConnectAuthenticate_Async#User_Pass_Account_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnClearCommandChannelCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ClearCommandChannelCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ClearCommandChannelAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to send CCC command to the server. Reverts the protected control connection back to plaintext connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ClearCommandChannel_TaskAsync, ClearCommandChannel_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ClearCommandChannelAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to send CCC command to the server. Reverts the protected control connection back to plaintext connection.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ClearCommandChannel_TaskAsync, ClearCommandChannel_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_1, ConnectAuthenticate_Async#User_Pass_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_2, ConnectAuthenticate_Async#User_Pass_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SslSecurityMode,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to the TLS/SSL FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 990).</param>
            <param name="security">FTP security type.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_ServerPortSec_TaskAsync#Server_Port_Security_1, ConnectAuthenticate_ServerPortSec_Async#Server_Port_Security_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SslSecurityMode,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to the TLS/SSL FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 990).</param>
            <param name="security">FTP security type.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/ConnectAuthenticate_ServerPortSec_TaskAsync#Server_Port_Security_2, ConnectAuthenticate_ServerPortSec_Async#Server_Port_Security_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDisconnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents FTP QUIT command.</remarks>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_1, ConnectAuthenticate_Async#User_Pass_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_2, ConnectAuthenticate_Async#User_Pass_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnFlushCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.FtpResponse})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.FlushCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FlushAsync(System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.FtpResponse},System.Object)">
            <summary>
            Begins an asynchronous operation to reads and returns control connection data, if available.
            </summary>
            <param name="timeout">The length of time (in milliseconds) to wait for data to be received.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FlushAsync(System.Int32,System.Object)">
            <summary>
            Begins an asynchronous operation to reads and returns control connection data, if available.
            </summary>
            <param name="timeout">The length of time (in milliseconds) to wait for data to be received.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUpgradeConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UpgradeConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UpgradeConnectionAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to secures the connection with TLS/SSL using the specified upgrade request type and security parameters.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UpgradeConnectionAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to secures the connection with TLS/SSL using the specified upgrade request type and security parameters.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetSystemNameCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetSystemNameCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetSystemNameAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SYST command.</p>
            <p>Some servers do not support SYST command and most servers return very inaccurate responses.</p>
            </remarks>
            <example source="TaskAsync/GetSystemName_TaskAsync#1, GetSystemName_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetSystemNameAsync(System.Object)">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SYST command.</p>
            <p>Some servers do not support SYST command and most servers return very inaccurate responses.</p>
            </remarks>
            <example source="TaskAsync/GetSystemName_TaskAsync#2, GetSystemName_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadUniqueFileCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadUniqueFileCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFileAsync(System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
            <example source="TaskAsync/UploadUniqueFile_TaskAsync#Stream_1, UploadUniqueFile_Async#Stream_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFileAsync(System.IO.Stream,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
            <example source="TaskAsync/UploadUniqueFile_TaskAsync#Stream_2, UploadUniqueFile_Async#Stream_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFileAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
            <example source="TaskAsync/UploadUniqueFile_TaskAsync#Path_1, UploadUniqueFile_Async#Path_1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFileAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
            <example source="TaskAsync/UploadUniqueFile_TaskAsync#Path_2, UploadUniqueFile_Async#Path_2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReadResponseCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.FtpResponse})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ReadResponseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReadResponseAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.FtpResponse},System.Object)">
            <summary>
            Begins an asynchronous operation to return the server response.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#1, SendCommandReadResponse_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReadResponseAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to return the server response.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#2, SendCommandReadResponse_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSendCommandCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SendCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SendCommandAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#1, SendCommandReadResponse_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SendCommandAsync(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#2, SendCommandReadResponse_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReinitializeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ReinitializeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReinitializeAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to terminate the USER session and purge all account information. The session will be reset to the default settings and the connection is left open.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP REIN command.</p>
            <p>
            This is identical to the state immediately after the connection is opened. A USER command may be issued to login.
            </p>
            <p>
            The REIN command is unsupported by many FTP servers and not supported
            correctly by most FTP proxies. Its usage is not recommended.
            Use <see cref="O:DisconnectAsync"/>/<see cref="O:ConnectAsync"/> instead.
            </p>
            </remarks>
            <example source="TaskAsync/Reinitialize_TaskAsync#1, Reinitialize_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReinitializeAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to terminate the USER session and purge all account information. The session will be reset to the default settings and the connection is left open.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP REIN command.</p>
            <p>
            This is identical to the state immediately after the connection is opened. A USER command may be issued to login.
            </p>
            <p>
            The REIN command is unsupported by many FTP servers and not supported
            correctly by most FTP proxies. Its usage is not recommended.
            Use <see cref="O:DisconnectAsync"/>/<see cref="O:ConnectAsync"/> instead.
            </p>
            </remarks>
            <example source="TaskAsync/Reinitialize_TaskAsync#2, Reinitialize_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSiteCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SiteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SiteAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Executes site-specific command and returns the response.
            </summary>
            <param name="command">Site-specific command.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SITE command.</p>
            <p>Using <see cref="O:SendCommand"/> or <see cref="O:SendCommandAsync"/> and <see cref="M:ComponentPro.Net.Ftp.ReadResponse"/> or <see cref="O:ReadResponseAsync"/> methods might be a better choice in some cases.</p>
            </remarks>
            <example source="TaskAsync/Site_TaskAsync#1, Site_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SiteAsync(System.String,System.Object)">
            <summary>
            Executes site-specific command and returns the response.
            </summary>
            <param name="command">Site-specific command.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SITE command.</p>
            <p>Using <see cref="O:SendCommand"/> or <see cref="O:SendCommandAsync"/> and <see cref="M:ComponentPro.Net.Ftp.ReadResponse"/> or <see cref="O:ReadResponseAsync"/> methods might be a better choice in some cases.</p>
            </remarks>
            <example source="TaskAsync/Site_TaskAsync#2, Site_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnRemoteCopyCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.RemoteCopyCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.RemoteCopyAsync(ComponentPro.Net.Ftp,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Starts an asynchronous copy a file on this FTP server to another server specified in the <paramref name="destinationFtpServer"/> parameter 
            using direct server-to-server transfer, also known as FXP.
            </summary>
            <param name="destinationFtpServer">An <see cref="T:ComponentPro.Net.Ftp"/> object representing the destination server. Must be already initialized.</param>
            <param name="sourcePath">The path to the source file to be copied.</param>
            <param name="destinationPath">The path to the destination file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/RemoteCopy_TaskAsync#1, RemoteCopy_Async#1"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.RemoteCopyAsync(ComponentPro.Net.Ftp,System.String,System.String,System.Object)">
            <summary>
            Starts an asynchronous copy a file on this FTP server to another server specified in the <paramref name="destinationFtpServer"/> parameter 
            using direct server-to-server transfer, also known as FXP.
            </summary>
            <param name="destinationFtpServer">An <see cref="T:ComponentPro.Net.Ftp"/> object representing the destination server. Must be already initialized.</param>
            <param name="sourcePath">The path to the source file to be copied.</param>
            <param name="destinationPath">The path to the destination file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="TaskAsync/RemoteCopy_TaskAsync#2, RemoteCopy_Async#2"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCommandResponse(ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CommandResponse" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnStateChanged(ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.StateChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCertificateReceived(System.Object,ComponentPro.Security.CertificateReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CertificateReceived" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCertificateRequired(System.Object,ComponentPro.Security.CertificateRequiredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CertificateRequired" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnListProgress(ComponentPro.IO.RemoteFileSystemListProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ListProgress"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemListProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ComponentPro#IO#IRemoteFileSystem#GetConnectionParameters">
            <summary>
            Gets connection parameters. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ComponentPro#IO#IRemoteFileSystem#GetAuthenticationParameters">
            <summary>
            Gets authentication parameters. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetItemInfoPartsBeforeTransferring(ComponentPro.IO.FileSystem,System.Boolean)">
            <summary>
            Indicates whether the file system should obtains information of the source files before transferring.
            </summary>
            <param name="anotherFileSystem">Source or destination file system to check.</param>
            <param name="copy">Indicates whether to copy to the <paramref name="anotherFileSystem"/>.</param>
            <value><c>true</c> if the file system should call <see cref="M:ComponentPro.Net.Ftp.GetItemInfo(System.String)"/> to obtain information of source files before transferring; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateFileInfo(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="originalPath">The original path of the file.</param>
            <param name="isFile">Indicates whether the specified path is a file.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.DiskFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateFileInfoSync(System.String,ComponentPro.IO.GetItemInfoParts,System.ComponentModel.AsyncOperation)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.FileInfoBase"/> and set appropriate file information. When the specified item exists the <see cref="T:ComponentPro.IO.FileInfoBase"/> instance will contain the information of the existing item.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="infoParts">Indicates what information of the file will be filled.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.FileInfoBase"/> instance.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateItemCollection">
            <summary>
            Creates a collection of the <see cref="T:ComponentPro.Net.FtpFileInfo"/>.
            </summary>
            <returns>The collection of the <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetStreamForWriting(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetStreamForReading(ComponentPro.IO.FileInfoBase,System.Int64,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="file">The file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <param name="asyncOp">The asynchronous operation object.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Clone">
            <summary>
            Returns a copy of the current file system.
            </summary>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EnsureFileSystem(ComponentPro.IO.FileSystem,System.Object[],System.Object[])">
            <summary>
            Ensures the file system is connected and alive.
            </summary>
            <param name="fileSystem">The source file system.</param>
            <param name="conn">The connection parameters.</param>
            <param name="authn">The authentication parameters.</param>
            <exclude/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.c_K6M(System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="asyncOp"></param>
            <returns><c>true</c> if absolute Dir Change Failed; <c>false</c> if not or unknown.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.c_E4K(c_Q3K,ComponentPro.IO.ProgressFileItem,System.String,System.ComponentModel.AsyncOperation)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="path"></param>
            <param name="currentProgressFileItem"></param>
            <param name="asyncOp"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Ftp"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            <p>
            This method cancels the current operation. When data is being transferred, calling this method causes the object to attempt to abort the data transfer gracefully. 
            If the <see cref="P:ComponentPro.Net.Ftp.Config"/>.<see cref="P:ComponentPro.Net.FtpConfig.SendAbortCommand"/> property is enabled, the method will send the ABOR command to the FTP server. If the <see cref="P:ComponentPro.Net.Ftp.Config"/>.<see cref="P:ComponentPro.Net.FtpConfig.SendTelnetInterruptSignal"/> property is enabled and the current operation is a file download,
            the method sends Telnet interrupt signal to an FTP server.
            </p>
            <p>
            The <see cref="O:ComponentPro.Net.Ftp.Cancel"/> method can also be used to abort other processes. For example, this method can be used to abort a lengthy multi-file operation (e.g. transferring files or deleting files).
            </p>
            <p>
            If the <see cref="P:ComponentPro.Net.Ftp.State"/> property is not <see cref="F:ComponentPro.IO.RemoteFileSystemState.Ready"/> state, you might need to call the <see cref="M:ComponentPro.Net.Ftp.Flush(System.Int32)"/> to set it back to the <see cref="F:ComponentPro.IO.RemoteFileSystemState.Ready"/> state.
            </p>
            </remarks>
            <example source="Cancel"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Cancel(System.Object)">
            <summary>
            Cancels all the operations.
            </summary>
            <param name="userState">A user-provided object that identifies the operation.</param>
            <return><c>true</c> if an operation is being canceled; otherwise, <c>false</c>.</return>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <example source="ConnectAuthenticate#User_Pass"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty or <paramref name="serverPort"/> is invalid.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String)">
            <summary>
            Connects to the FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <example source="ConnectAuthenticate#User_Pass"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String,ComponentPro.Net.SslSecurityMode)">
            <summary>
            Connects to the remote FTP server with the specified security mode. Port number is 991 if the security mode is <see cref="F:ComponentPro.Net.SslSecurityMode.Implicit"/>, otherwise 21.
            </summary>
            <param name="serverName">The server address. It can either be a hostname or a dotted string address.</param>
            <param name="security">The connection security mode.</param>
            <example source="ConnectAuthenticate#Server_Sec"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String,System.Int32,ComponentPro.Net.SslSecurityMode)">
            <summary>
            Connects to the remote FTP server with the specified security mode.
            </summary>
            <param name="serverName">The server address. It can either be a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="security">The connection security mode.</param>
            <example source="ConnectAuthenticate#Server_Port_Sec"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Disconnect">
            <summary>
            Disconnects the FTP client from the FTP server to which it is connected.
            </summary>
            <remarks>The Disconnect method sends the QUIT command to the FTP server and makes sure that the command connection is closed.</remarks>
            <returns>The exit message returned by the server.</returns>
            <example source="ConnectAuthenticate#User_Pass"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStream(System.String)">
            <summary>
            Retrieves a direct access to the read-only data stream being received.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <returns>A Stream for reading data from the remote file.</returns>
            <remarks>
            <p>Because the FTP protocol does not support processing multiple commands or transfers at the same time, the stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be retrieved from the current working directory. 
            If you want to retrieve the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
            <example source="GetDownloadStream#Path"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting download stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Retrieves a direct access to the read-only data stream being received.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>A Stream for reading data from the remote file.</returns>
            <remarks>
            <p>Because the FTP protocol does not support processing multiple commands or transfers at the same time, the stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be retrieved from the current working directory. 
            If you want to retrieve the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
            <example source="GetDownloadStream#Path_Seek"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting download stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStream(System.String)">
            <summary>
            Retrieves a direct access to the write-only data stream to send to.
            </summary>
            <param name="remotePath">The filename of the file to write to. Some FTP servers may be case-sensitive.</param>
            <returns>A Stream for writing data to the remote file.</returns>
            <remarks>
            <p>Because the FTP protocol does not support processing multiple commands or transfers at the same time, the stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="GetUploadStream#Path"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting upload stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Retrieves a direct access to the write-only data stream to send to.
            </summary>
            <param name="remotePath">The filename of the file to write to. Some FTP servers may be case-sensitive.</param>
            <returns>A Stream for writing data to the remote file.</returns>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <remarks>
            <p>Because the FTP protocol does not support processing multiple commands or transfers at the same time, the stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="GetUploadStream#Path_Seek"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting upload stream of the remote file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateDirectory(System.String)">
            <summary>
            Create a directory on the FTP server.
            </summary>
            <param name="path">The name of the directory to create. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method implements FTP MKD command.
            </p>
            <p>
            By default, the directory will be created in the current working directory. 
            If you want to create the directory in another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            <p>
            <b>CAUTION:</b> The reply codes for MKD command represents the absolute path of the freshly created directory as stated in RFC 959. 
            However, many FTP servers do not comply with the requirement. In this case, the method returns a <c>null</c> reference.
            </p>
            </remarks>
            <example source="MakeDir"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while create the directory on the server.</exception>
            <returns>A string containing the absolute path of the newly created remote directory if the server complies to RFC 959; otherwise, <b>null</b> reference is returned.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.RemoteCopy(ComponentPro.Net.Ftp,System.String,System.String)">
            <summary>
            Copies a file on this FTP server to another server specified in the <paramref name="destinationFtpServer"/> parameter using direct server-to-server transfer, also known as FXP.
            </summary>
            <param name="destinationFtpServer">An <see cref="T:ComponentPro.Net.Ftp"/> object representing the destination server. Must be already initialized.</param>
            <param name="sourceFilePath">The path to the source file to be copied.</param>
            <param name="destinationFilePath">The path to the destination file.</param>
            <example source="RemoteCopy"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationFtpServer"/>, <paramref name="sourceFilePath"/>, or <paramref name="destinationFilePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFilePath"/> or <paramref name="destinationFilePath"/> is empty or contains illegal path characters.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ClearCommandChannel">
            <summary>
            Clears the command channel after login to facilitate firewall NAT when connecting using a secure data channel. This method reverts the protected control connection back to plaintext connection.
            </summary>
            <remarks>
            <p>
            This method implements the FTP CCC (Clear Command Channel) command.
            </p>
            <p>
            This command is used in circumstances where it is desirable
            to protect the control connection only during authentication,
            when user credentials are being sent by the client.
            </p>
            <p>
            When the control connection is reverted to plaintext,
            subsequent data transfers will be protected with the current
            <see cref="P:ComponentPro.Net.Ftp.SecureDataTransfers"/> settings.
            </p>
            </remarks>
            <example source="ClearCommandChannel"/>
            <exception cref="T:System.InvalidOperationException">when the current connection was not secured (using Implicit or Explicit security mode).</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UpgradeConnection">
            <summary>
            Secures the connection with TLS/SSL.
            </summary>
            <remarks>This method can only be called on connections that have not been secured yet.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Rename(System.String,System.String)">
            <summary>
            Renames a file or directory on the FTP server.
            </summary>
            <param name="path">The filename of the file to rename. Some FTP servers may be case-sensitive.</param>
            <param name="newPath">The new filename. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method represents FTP RNFR/RNTO command pair.
            </p>
            <p>
            By default, the file will be renamed in the current working directory. 
            If you want to rename the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="Rename"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="newPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> or <paramref name="newPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while renaming the file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawName">
            <summary>
            Retrieves an unprocessed, clear text list representing the entire contents of the current working directory as sent by the FTP server. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <return>An array of raw lines.</return>
            <example source="ListRawName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawName(System.String)">
            <summary>
            Retrieves an unprocessed, clear text list representing the entire contents of the specified directory as sent by the FTP server. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="parameter">Arguments for the LIST command. It is usually the path of the directory to list.</param>
            <return>An array of raw lines.</return>
            <example source="ListRawName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the specified directory.</exception>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Retrieves an unprocessed, clear text list representing the entire contents of the specified directory as sent by the FTP server. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="parameter">Arguments for the LIST command. It is usually the path of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <return>An array of raw lines.</return>
            <example source="ListRawName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the specified directory.</exception>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListName">
            <summary>
            Returns a list of file and directory names in the current working directory. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <return>An array of names.</return>
            <example source="ListName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the current directory.</exception>
            <remarks>
            <p>
            The component uses the <c>NLST</c> command. The returning name list varies from server to server. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. It's recommended to use the <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/> methods in most cases.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListName(System.String)">
            <summary>
            Returns a list of file and directory names. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="parameter">Arguments for the NLST command. It is usually the path of the directory to list.</param>
            <return>An array of names.</return>
            <example source="ListName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the specified directory.</exception>
            <remarks>
            <p>
            The component uses the <c>NLST</c> command. The returning name list varies from server to server. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. It's recommended to use the <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/> methods in most cases.
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListName(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a list of file and directory names. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="parameter">Arguments for the NLST command. It is usually the path of the directory to list.</param>
            <return>An array of names.</return>
            <example source="ListName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the specified directory.</exception>
            <remarks>
            <p>
            The component uses the <c>NLST</c> command. The returning name list varies from server to server. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. It's recommended to use the <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/> methods in most cases.
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListNameSync(System.String,ComponentPro.IO.SearchCondition,System.ComponentModel.AsyncOperation)">
            <summary>
            Returns a list of items' names.
            </summary>
            <param name="path">The path of the directory to retrive names.</param>
            <param name="searchCondition">The search condition.</param>
            <param name="asyncOp">The async operation.</param>
            <returns>The list of items' names.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.ListItemReceived"/> event.
            </p>
            <p>This method does not list items in subdirectories. To list items recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> method.</p>
            </remarks>
            <example source="ListDirectory#Empty"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the current working directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.ListItemReceived"/> event.
            </p>
            <p>This method does not list items in subdirectories. To list items recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> method.</p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="ListDirectory#SearchCondition"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the current directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(System.String)">
            <summary>
            Returns parsed list of files and directories.
            </summary>
            <param name="parameter">Arguments for the LIST or MLSD command. It is usually the path of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.ListItemReceived"/> event.
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            <p>This method does not list items in subdirectories. To list items recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> method.</p>
            </remarks>
            <example source="ListDirectory#Parameter"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the specified directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns parsed list of files and directories that match the specified search condition.
            </summary>
            <param name="parameter">Arguments for the LIST or MLSD command. It is usually the path of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            <p>
            The component uses the <c>MLSD</c> command if <see cref="F:ComponentPro.Net.FtpFeatures.MachineProcessingList"/> is enabled in the <see cref="P:ComponentPro.Net.Ftp.EnabledFeatures"/> property and the server supports it (indicated by the property <see cref="P:ComponentPro.Net.Ftp.SupportedFeatures"/>); otherwise, the component uses the <c>LIST</c> command
            </p>
            <p>
            To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.ListItemReceived"/> event.
            </p>
            <p>
            <b>Caution:</b>RFC does not define the <paramref name="parameter"/> argument. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with a <paramref name="parameter"/> other than null is not
            recommended and will make your code incompatible with many FTP servers.</p>
            <p>This method does not list items in subdirectories. To list items recursively, use the <see cref="O:ComponentPro.IO.FileSystem.Search"/> method.</p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while listing files and directories in the current directory.</exception>
            <example source="ListDirectory#Parameter_SearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the FTP server to which it is connected using the specified username and password.
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <remarks>
            <p>
            The FTP client must be connected to the FTP server using the <b>Connect</b> method before calling this method. 
            The Login method will send the USER, PASS and ACCT commands to the FTP server.
            </p>
            <p>This method represents FTP USER/PASS command pair.</p>
            <p>If the userName parameter is a null reference, "anonymous" is used. If the password parameter is a null reference, "user@anonymous.com" is used.</p>
            </remarks>
            <returns>The logon message returned by the remote server.</returns>
            <example source="ConnectAuthenticate#User_Pass"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Authenticate(System.String,System.String,System.String)">
            <summary>
            Authenticates the user to the FTP server to which it is connected using the specified username and password.
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="account">The name of the account on the FTP server.</param>
            <returns>The logon message returned by the remote server.</returns>
            <remarks>
            <p>
            The FTP client must be connected to the FTP server using the <b>Connect</b> method before calling this method. 
            The Login method will send the USER, PASS and ACCT commands to the FTP server.
            </p>
            <p>This method represents FTP USER/PASS command pair.</p>
            <p>If the userName parameter is a null reference, "anonymous" is used. If the password parameter is a null reference, "guest" is used.</p>
            </remarks>
            <example source="ConnectAuthenticate#User_Pass_Account"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Reinitialize">
            <summary>
            Terminates the USER session and purge all account information. The session will be reset to the default settings and the connection is left open.
            </summary>
            <remarks>
            <p>Represents FTP REIN command.</p>
            <p>
            This is identical to the state immediately after the connection is opened. A USER command may be issued to login.
            </p>
            <p>
            The REIN command is unsupported by many FTP servers and not supported
            correctly by most FTP proxies. Its usage is not recommended.
            Use <see cref="O:ComponentPro.Net.Ftp.Disconnect"/>/<see cref="O:ComponentPro.Net.Ftp.Connect"/> instead.
            </p>
            </remarks>
            <example source="Reinitialize"/>
            <exception cref="T:ComponentPro.Net.FtpException">Reinitialize is not supported by this server at this time. Server is in implicit security mode.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetItemInfo(System.String)">
            <summary>
            Returns an <see cref="T:ComponentPro.Net.FtpFileInfo"/> object containing information of the specified file.
            </summary>
            <param name="path">The name of the file to get information.</param>
            <returns>An <see cref="T:ComponentPro.Net.FtpFileInfo"/> object containing information of the specified file or null reference if the file is unavailable.</returns>
            <example source="GetItemInfo"/>
            <exception cref="T:ComponentPro.Net.FtpException">the necessary commands to obtain file information are not supported by the server or an error returned from the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified remote file.
            </summary>
            <param name="filePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The size of the specified file in bytes.</returns>
            <remarks>
            <p>Represents FTP SIZE command.</p>
            <p>The SIZE command was not defined by the original RFC, but it has been widely supported for a number of years.</p>
            </remarks>
            <example source="GetFileLength"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting information of the remote file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists on the server.
            </summary>
            <param name="filePath">The path of the remote file to check.</param>
            <returns><b>true</b> if the file exists; otherwise, <b>false</b>.</returns>
            <example source="FileExists#Path"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while checking the remote file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DirectoryExists(System.String)">
            <summary>
            Checks whether the specified directory exists on the server. Not all FTP servers support this!
            </summary>
            <param name="directoryPath">The path of the remote directory to check.</param>
            <returns><b>true</b> if the directory exists; otherwise, <b>false</b>.</returns>
            <example source="DirectoryExists"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="directoryPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while checking the remote directory.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetSupportedChecksumTypes">
            <summary>
            Returns checksum types supported by the server.
            </summary>
            <returns>Checksum types supported by the server.</returns>
            <example source="CalcLocalChecksum"/>
            <exception cref="T:System.InvalidOperationException">Not connected to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SendCommand(System.String)">
            <summary>
            Sends a custom command to the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server (eg. "LIST").</param>
            <remarks>
            <p>After calling this method, use the <see cref="M:ComponentPro.Net.Ftp.ReadResponse"/> method to receive response from the server.</p>
            <p>The <see cref="P:ComponentPro.Net.Ftp.State"/> must be <see cref="T:ComponentPro.IO.RemoteFileSystemState">Ready</see> or <see cref="T:ComponentPro.IO.RemoteFileSystemState">Processing</see> when calling this method.</p>
            </remarks>
            <example source="SendCommandReadResponse"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="command"/> is empty.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while sending the specified command to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReadResponse">
            <summary>
            Returns the response of the FTP server to the command that was sent previously.
            </summary>
            <returns>Response of the FTP server.</returns>
            <remarks>
            <p>A call to the <see cref="M:ComponentPro.Net.Ftp.SendCommand(System.String)"/> must be made before calling this method. 
            Use <see cref="M:ComponentPro.Net.Ftp.SendCommand(System.String)"/> and <see cref="M:ComponentPro.Net.Ftp.ReadResponse"/> methods to implement custom FTP commands.</p>
            <p>The <see cref="P:ComponentPro.Net.Ftp.State"/> will be in <see cref="T:ComponentPro.IO.RemoteFileSystemState">Processing</see> state if the response <see cref="P:ComponentPro.Net.FtpResponse.Group">Group</see> is 3,
            in <see cref="T:ComponentPro.IO.RemoteFileSystemState">Reading</see> state if the response <see cref="P:ComponentPro.Net.FtpResponse.Group">Group</see> is 1 or
            in <see cref="T:ComponentPro.IO.RemoteFileSystemState">Ready</see> state in other cases.</p>
            </remarks>
            <example source="SendCommandReadResponse"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while reading the response from the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time at which the specified file was last written.Some servers do not support this feature.
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="newDateTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path.</param>
            <remarks>
            <p>
            Support for setting modification date and time, either using MFMT or MDTM command, is not as widespread
            as retrieving it. This method will fail on servers that support neither of these commands.
            </p>
            </remarks>
            <example source="SetLastWriteTime"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">error occurred while setting last modification time of the remote file.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.KeepAlive">
            <summary>
            Sends a NOOP command to the server to keep the connection alive. Some servers ignore the NOOP command.
            </summary>
            <example source="KeepAlive"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while sending/processing NOOP command to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetSystemName">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <returns>The name of the remote OS.</returns>
            <remarks>
            <p>Represents FTP SYST command.</p>
            <p>Some servers do not support SYST command and most servers return very inaccurate responses.</p>
            </remarks>
            <example source="GetSystemName"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while sending/processing SYST command to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Site(System.String)">
            <summary>
            Executes site-specific command and returns the response.
            </summary>
            <param name="command">Site-specific command.</param>
            <returns>Command-specific response.</returns>
            <remarks>
            <p>Represents FTP SITE command.</p>
            <p>Using <see cref="M:ComponentPro.Net.Ftp.SendCommand(System.String)">SendCommand</see>
            and <see cref="M:ComponentPro.Net.Ftp.ReadResponse">ReadResponse</see>
            method might be a better choice in some cases.</p>
            </remarks>
            <example source="Site"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="command"/> is empty.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while sending/processing SITE command to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)">
            <summary>
            Changes the current folder of the FTP server.
            </summary>
            <param name="path">The new current folder. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method uses CDUP command for ".." pathnames. "." pathnames are ignored. For other pathnames, CWD command is used.
            </p>
            <p>
            Both relative and absolute paths can be provided to the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the FTP server's current folder. 
            However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths.
            The FTP server's current folder is used by the FTP server as the base folder from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. 
            </p>
            <p>
            The current folder can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="SetCurrentDirectory"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while changing the current working directory on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified remote file or directory was last written to. Some servers return times in their local time zones, some use GMT and some do not support this feature.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.</returns>
            <remarks>
            <p>Represents FTP MDTM command.</p>
            <p>Some servers return times in their local time zones, some use GMT.</p>
            </remarks>
            <example source="GetLastWriteTime"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while getting last write time of the specified file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFile(System.IO.Stream)">
            <summary>
            Uploads the data from the specified Stream to the FTP server and stores it using a unique filename. Many servers do not support this feature, and many servers support this incorrectly, such as MS FTP.
            </summary>
            <param name="sourceStream">A Stream whose data is to be sent to the FTP server.</param>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="UploadUniqueFile#Stream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the content in the stream.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="F:ComponentPro.IO.FileSystemExceptionStatus.OperationCanceled"/>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFile(System.String)">
            <summary>
            Uploads the data from the specified file to the FTP server's current folder and stores it using a unique filename. Many servers do not support this feature, and many servers support this incorrectly, such as MS FTP.
            </summary>
            <param name="localPath">The path and filename of the local file to send.</param>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="UploadUniqueFile#Path"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file.</exception>
            <exception cref="T:ComponentPro.IO.FileSystemException">User has canceled the operation. <see cref="P:ComponentPro.IO.FileSystemException.Status"/> property is set to <see cref="F:ComponentPro.IO.FileSystemExceptionStatus.OperationCanceled"/>.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteFile(System.String)">
            <summary>
            Deletes the specified file on the remote FTP server.
            </summary>
            <param name="path">The name of the file to delete. Some FTP servers may be case-sensitive. It can either be an absolute pathname or relative to the current directory.</param>
            <remarks>
            <p>
            This method represents FTP DELE command.
            </p>
            <p>
            By default, the file will be deleted from the current working directory. 
            If you want to delete the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="DeleteFile"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while deleting the specified file on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetCurrentDirectory">
            <summary>
            Retrieves the current working directory of the FTP server.
            </summary>
            <returns>
            A string representing the FTP server's current directory. The path returned is an absolute path that can be used with the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> to go directly to this directory regardless of the current working directory.
            </returns>
            <remarks>
            <p>
            The FTP server's current folder is used by the FTP server as the base folder from which to perform file operations such as obtaining folder contents, receiving, sending and deleting files, changing the current folder, etc. 
            It can be changed using the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method. The <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method will send the PWD command to the FTP server.
            </p>
            <p>
            Some servers (eg. TOPS-20) do not support this method.
            </p>
            </remarks>
            <example source="GetCurrentDirectory"/>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while sending/processing PWD command to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory from the FTP server. To delete a directory containing files and subdirectories, use the <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">DeleteDirectory</see> method.
            </summary>
            <param name="path">The name of the folder to delete. Some FTP servers may be case-sensitive. This directory must not contain files and subdirectories.</param>
            <remarks>
            <p>
            This method represents FTP RMD command.
            </p>
            <p>
            By default, the directory will be deleted from the current working directory. 
            If you want to delete the directory from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
            <example source="DeleteDirectory#Empty"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">The specified directory not found, not empty or an error occurred while deleting the specified directory on the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String)">
            <summary>
            Appends the content of the specified data stream to the file on the remote FTP server.
            </summary>
            <param name="sourceStream">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <remarks>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="AppendFile#Stream"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the content in the stream to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.String,System.String)">
            <summary>
            Appends the content of the local file to the file on the remote FTP server.
            </summary>
            <param name="localPath">The path of the local file to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <remarks>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="AppendFile#Path"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the remote FTP server.
            </summary>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="sourceStream">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <remarks>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="AppendFile#Stream_Length"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the local file to the file on the remote FTP server.
            </summary>
            <param name="localPath">The path of the local file to transfer.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <remarks>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
            <example source="AppendFile#Path_Offset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="localPath"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> or <paramref name="localPath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the remote FTP server.
            </summary>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">The number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="sourceStream">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <returns>The number of bytes transferred.</returns>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided. However, some FTP servers might not support absolute paths, and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            <example source="AppendFile#Stream_Offset"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="remotePath"/> or <paramref name="sourceStream"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="remotePath"/> is empty or contains illegal path characters.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="localOffset"/> or <paramref name="length"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading the local file to the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Flush(System.Int32)">
            <summary>
            Reads and returns control connection data, if available.
            </summary>
            <param name="timeout">The length of time (in milliseconds) to wait for data to be received.</param>
            <returns><see cref="T:ComponentPro.Net.FtpResponse"/> if data was read or <b>null</b> reference if no data available.</returns>
            <remarks>
            <p>
            This method can either be used to read messages from the FTP server that are not responses to any commands, 
            or to set the <see cref="P:ComponentPro.Net.Ftp.State"/> property back to the <see cref="T:ComponentPro.IO.RemoteFileSystemState">Ready</see> state if it is not <see cref="T:ComponentPro.IO.RemoteFileSystemState">Ready</see> state after aborting a file transfer with the <see cref="O:ComponentPro.Net.Ftp.Cancel"/> method.
            </p>
            <p>
            If the <see cref="P:ComponentPro.Net.Ftp.State"/> of the <see cref="T:ComponentPro.Net.Ftp"/> object is <see cref="T:ComponentPro.IO.RemoteFileSystemState">Reading</see>,
            <see cref="T:ComponentPro.IO.RemoteFileSystemState">Sending</see> or
            <see cref="T:ComponentPro.IO.RemoteFileSystemState">Processing</see> and no data
            is available within the specified time limit, it returns
            with a <b>null</b> reference. If data is available, it is read
            and returned. If the object is in any other state, an exception is thrown.
            </p>
            </remarks>
            <example source="Flush"/>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is invalid.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while reading the control connection data.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetActiveTransferType(ComponentPro.IO.FileTransferType)">
            <summary>
            Sets active transfer type.
            </summary>
            <param name="transferType">The desired transfer type.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetServerTimeDifference">
            <summary>
            Returns the time difference between the client and server.
            </summary>
            <returns>The time difference between the client and server.</returns>
            <example source="GetTimeDiff"/>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.FtpException">An error occurred while uploading temporary files or server does not support this operation.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <example source="SetFilePermissions"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,System.Int32)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <example source="SetFilePermissions"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,System.String)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMultipleFilesPermissions"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <example source="SetMultipleFilesPermissions"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this operation.
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="buildTree">Indicates whether to build directory structure for progress report.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.Collections.IEnumerable,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets permissions of multiple files at once.
            </summary>
            <param name="remotePath">The path of the base directory to search for files and directories to set permissions.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> objects containing information of the files or directories to set. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="permissions">The new permissions in string format.</param>
            <param name="buildTree">Indicates whether to build directory hierarchy for the progress report before starting the operation.</param>
            <param name="recursive">Indicates whether to set files, directories, and subdirectories.</param>
            <param name="searchCondition">The search condition to match against the files and directories.</param>
            <returns>The statictics of the operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSetFilePermissionsCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SetFilePermissionsCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,ComponentPro.Net.FtpFilePermissions,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,ComponentPro.Net.FtpFilePermissions,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissionsAsync(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSetMultipleFilesPermissionsCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.IO.FileSystemTransferStatistics})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.Collections.IEnumerable,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="buildTree">Indicates whether to build directory hierarchy for progress report before starting the operation.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> to set permissions. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.Collections.IEnumerable,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="buildTree">Indicates whether to build directory hierarchy for progress report before starting the operation.</param>
            <param name="filesToSet">List of filenames or <see cref="T:ComponentPro.IO.FileInfoBase"/> to set permissions. (e.g. <code>string[] files = new string[] {"file1", "file2", "dir1" }</code> or <code>object[] files = new string[] {"file1", fileInfo1, fileInfo2 }</code>)</param>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.IO.FileSystemTransferStatistics},System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="buildTree">Indicates whether to build directory hierarchy for progress report before starting the operation.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsAsync(System.String,System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="buildTree">Indicates whether to build directory hierarchy for progress report before starting the operation.</param>
            <param name="searchCondition">The search conditions to match against the files, or a null reference to search for all files.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Finalize">
            <summary>
            Finalizer. Called by garbage collector during object destruction.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ProcessException(System.Exception)">
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.c_C6M(System.String,System.String,ComponentPro.Net.Ftp,ComponentPro.Net.Ftp,System.ComponentModel.AsyncOperation)">
            <summary>
            Transfers a file from one server to another server.
            </summary>
            <param name="sourcePath">Path to a file that will be transferred.</param>
            <param name="destPath">Destination path.</param>
            <param name="sourceServer">Source server.</param>
            <param name="destServer">Destination server.</param>
        </member>
        <member name="E:ComponentPro.Net.Ftp.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:KeepAliveAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/KeepAlive_TaskAsync#2, KeepAlive_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetServerTimeDifferenceCompleted">
            <summary>
            Occurs when an asynchronous <see cref="M:ComponentPro.Net.Ftp.GetServerTimeDifference"/> operation completes.
            </summary>
            <example source="TaskAsync/GetTimeDiff_TaskAsync#2, GetTimeDiff_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetDownloadStreamCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetDownloadStreamAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetDownloadStream_TaskAsync#Path_2, GetDownloadStream_Async#Path_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetUploadStreamCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:GetUploadStreamAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetUploadStream_TaskAsync#Seek_2, GetUploadStream_Async#Seek_3"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsBusy">
            <summary>
            Gets a boolean value indicating whether there are any operations in progress.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection is established.
            </summary>
            <remarks>
            This property does not ensure the connection is still alive. It just indicates that the connection was established successfully.
            To ensure the connection is still alive, use the <see cref="M:ComponentPro.Net.Ftp.GetConnectionState(System.Boolean@,System.Int32@)"/> method.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is authenticated.
            </summary>
            <value><c>true</c> if authenticated; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ServerPort">
            <summary>
            Gets the server port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ServerName">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ListRawNameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ListRawNameAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Ftp\ListRawName_Async,$ComponentPro.Sftp\ListRawName_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.AsciiFileSearchConditions">
            <summary>
            Gets or sets the list of ASCII search conditions. 
            </summary>
            <remarks>
            When this property is not null the component automatically uses ASCII transfer type for the files with names that match one of the <see cref="P:ComponentPro.Net.Ftp.AsciiFileSearchConditions">ASCII file search conditions</see> as ASCII files.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ReconnectionMaxRetries">
            <summary>
            Gets or sets the maximum number of retries for reconnection.
            </summary>
            <remarks>
            By default, this value is 0 (the library does not try to reconnect to the server when the connection is lost). 
            When the connection is lost, the component will try to reconnect to the server. If the number of retries exceeds this value, the class will report the connection error.
            </remarks>        
            <example source="Reconnect"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ReconnectionFailureDelay">
            <summary>
            Gets or sets the delay in milliseconds between failed login attempts for reconnection.
            </summary>
            <remarks>
            By default, this value is 5000 (5 secs). When the connection is lost, the component will try to reconnect to the server. If the number of retries exceeds the <see cref="P:ComponentPro.Net.Ftp.ReconnectionMaxRetries"/>, the class will report the connection error.
            </remarks>     
            <example source="Reconnect"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.PathNormalization">
            <summary>
            Gets or sets a boolean value indicating whether to normalize path before any file or directory operation. The default value is <c>true</c>.
            </summary>        
            <remarks>
            Set this to <c>false</c> if an operation fails due to the invalid normalized path or file path should be sent to the server as-is without adding the current directory to the beginning of the file path.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ReconnectionErrorChecking">
            <summary>
            Occurs when the file system has encountered an error and needs to determine whether it should reconnect to the server.
            </summary>
            <remarks>
            This event is fired when the file system has encountered an error and need to determine whether the it should reconnect to the server or the <see cref="M:ComponentPro.Net.Ftp.IsFatalError(System.Exception)"/> method is called.
            </remarks>
            <example source="Reconnect"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.Reconnecting">
            <summary>
            Occurs when the file system has encountered an error and trying to reconnect to the server.
            </summary>
            <example source="Reconnect"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.Reconnected">
            <summary>
            Occurs when the file system encountered an error and reconnected to the server successfully.
            </summary>
            <example source="Reconnect"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.EncounteredFatalError">
            <summary>
            Gets a boolean value indicating whether the client object has encountered a fatal error.
            </summary>
            <value><c>true</c> if the client has tried and failed to reconnect to the server with the number of retries specified in <see cref="P:ComponentPro.Net.Ftp.ReconnectionMaxRetries"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ResumeUploadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ResumeUploadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ResumeUploadFile_TaskAsync#Path_2, ResumeUploadFile_Async#Path_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ResumeDownloadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ResumeDownloadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ResumeDownloadFile_TaskAsync#Path_2,ResumeDownloadFile_Async#Path_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\UploadFile_TaskAsync#Path_2,UploadFile_Async#Path_2"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DownloadFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\DownloadFile_TaskAsync,DownloadFile_Async"/>        
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:UploadAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\UploadFiles_TaskAsync#Path_Options_2,UploadFiles_Async#Path_Options_2"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DownloadCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DownloadAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\DownloadFiles_TaskAsync#Path_Options_2,DownloadFiles_Async#Path_Options_2"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.AppendFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.AppendFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/AppendFile_TaskAsync#Path_Offset_Length_2, AppendFile_Async#Path_Offset_Length_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.AuthenticateAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\ConnectAuthenticate_TaskAsync#User_Pass_3, ConnectAuthenticate_Async#User_Pass_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ClearCommandChannelCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.ClearCommandChannelAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/ClearCommandChannel_TaskAsync, ClearCommandChannel_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.ConnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_3, ConnectAuthenticate_Async#User_Pass_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.DisconnectAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/ConnectAuthenticate_TaskAsync#User_Pass_2, ConnectAuthenticate_Async#User_Pass_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.FlushCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.FlushAsync"/> operation completes.
            </summary>        
        </member>
        <member name="E:ComponentPro.Net.Ftp.UpgradeConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.UpgradeConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetSystemNameCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.GetSystemNameAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/GetSystemName_TaskAsync#2, GetSystemName_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadUniqueFileCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.UploadUniqueFileAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/UploadUniqueFile_TaskAsync#Path_2, UploadUniqueFile_Async#Path_3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ReadResponseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.ReadResponseAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#2, SendCommandReadResponse_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SendCommandCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.SendCommandAsync"/> operation completes.
            </summary>
            <example source="TaskAsync\SendCommandReadResponse_TaskAsync#2, SendCommandReadResponse_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ReinitializeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.ReinitializeAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/Reinitialize_TaskAsync#2, Reinitialize_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SiteCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.SiteAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/Site_TaskAsync#2, Site_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.RemoteCopyCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Ftp.RemoteCopyAsync"/> operation completes.
            </summary>
            <example source="TaskAsync/RemoteCopy_TaskAsync#2, RemoteCopy_Async#3"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CommandResponse">
            <summary>
            Occurs when a command is sent to the server or a response is received.
            </summary>
            <example source="GeneralEvents/CommandResponse"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Ftp"/> object is changed.
            </summary>
            <example source="GeneralEvents/StateChanged"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ListItemReceived">
            <summary>
            Occurs when a file and directory listing item is received by the <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/>, <see cref="O:ComponentPro.Net.Ftp.ListRawName"/> or <see cref="O:ComponentPro.Net.Ftp.ListName"/> methods.
            </summary>
            <example source="GeneralEvents/ListItemReceived"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CertificateReceived">
            <summary>
            Occurs when an FTP server's certificate was received and verified.
            </summary>
            <example source="GeneralEvents/CertificateReceived"/>
            <seealso cref="E:ComponentPro.Net.Ftp.CertificateRequired"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CertificateRequired">
            <summary>
            Occurs when a client certificate is required by the FTP server, or the one provided was not accepted.
            </summary>
            <example source="GeneralEvents/CertificateRequired"/>
            <seealso cref="E:ComponentPro.Net.Ftp.CertificateReceived"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ListProgress">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Ftp"/> object is changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Net.Ftp.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.CanGetStreamForWriting">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.CanGetStreamForReading">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.FileSystemFeatures">
            <summary>
            Gets supported features.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ChangeDirectoryBeforeListing">
            <summary>
            Gets or sets a boolean value indicating whether to force the multi-file operations like <see cref="O:ComponentPro.Net.Ftp.Upload"/>, <see cref="O:ComponentPro.Net.Ftp.Download" /> and <see cref="O:ComponentPro.Net.Ftp.DeleteDirectory" /> methods to change directory before listing directory.
            </summary>
            <remarks>
            When this option is set to <i>true</i>, the Ftp class changes the current working directory before listing a remote directory while transferring or deleting files.
            You can set this option to <i>true</i> for highly compatible with all FTP servers, but it takes more time 
            for changing directories in the <see cref="O:ComponentPro.Net.Ftp.Upload" />, <see cref="O:ComponentPro.Net.Ftp.Download" /> and <see cref="O:ComponentPro.Net.Ftp.DeleteDirectory" /> methods. If you are certain that your FTP server supports absolute path, this option
            can be set to <i>false</i>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ChangeDirectoryBeforeFileOperation">
            <summary>
            Gets or sets a boolean value indicating whether to force the <see cref="O:ComponentPro.Net.Ftp.Upload" />, <see cref="O:ComponentPro.Net.Ftp.Download" /> and <see cref="O:ComponentPro.Net.Ftp.DeleteDirectory" /> methods to change directory before transferring files.
            </summary>
            <remarks>
            When this option is set to <i>true</i>, the Ftp class changes the current working directory before transferring or deleting files. 
            You can set this option to <i>true</i> for highly compatible with almost FTP servers, but it takes more time 
            for changing directories in the <see cref="O:ComponentPro.Net.Ftp.Upload" />, <see cref="O:ComponentPro.Net.Ftp.Download" /> and <see cref="O:ComponentPro.Net.Ftp.DeleteDirectory" /> methods. If you are certain that your FTP server supports absolute path, this option
            can be set to <i>false</i>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Ftp.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the IPEndPoint.Address method to retrieve the local IPAddress, and the IPEndPoint.Port method to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the RemoteEndPoint property gets the EndPoint that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this EndPoint to an IPEndPoint before retrieving any information. 
            You can then call the IPEndPoint.Address method to retrieve the remote IPAddress, and the IPEndPoint.Port method to retrieve the remote port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Ftp"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.TransferState">
            <summary>
            Gets the current transfer state of the <see cref="T:ComponentPro.Net.Ftp"/> object.
            </summary>
            <value>The current transfer state.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ServerType">
            <summary>
            Gets the detected server type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period an FTP operation (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            Specify -1 or 0 to indicate that the request does not time out.
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.AbortTimeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period an FTP abort operation should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 3000 (3 seconds). Minimal value is 1000.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsConnectionSecured">
            <summary>
            Gets a boolean value indicating whether the current connection (if any) is secured with TLS/SSL layer.
            </summary>
            <value><c>true</c> if the current connection is TLS/SSL; <c>false</c> if the connection is not secure.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SecureDataTransfers">
            <summary>
            Gets or sets a value which specifies whether data transfers are secure.
            </summary>
            <value><c>true</c> if data transfers are secure, <c>false</c> if unsecure.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DataAddress">
            <summary>
            Gets or sets the IP address announced to the FTP server when establishing an <see cref="P:ComponentPro.Net.Ftp.Passive">active mode</see> data transfer.
            </summary>
            <value>IP address.</value>
            <remarks>
            By default, the value of this property is <see cref="F:System.Net.IPAddress.None"/> which means that
            the address of the listening interface is used instead.
            This has no effect for passive mode transfers.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DataPortRange">
            <summary>
            Gets or sets the local TCP port range used for data transfers. Please note that is usually only useful for active mode (see <see cref="P:ComponentPro.Net.Ftp.Passive"/>),
            not in passive mode, where only the port range specified at the server is usually important. In passive mode, only set this property if you know
            precisely what you are doing, because setting it to a range that is too small or corresponds to the server range might often lead to inability
            to transfer many files!
            </summary>
            <value>The port range.</value>
            <remarks>
            To set FTP port when connecting, please use the <see cref="O:Connect"/> method.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.KeepAliveDuringTransferInterval">
            <summary>
            Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel during a file transfer. The default value is 0 - NOOP commands are not sent during a file transfer.
            </summary>
            <value>The number of seconds to wait before sending a NOOP command during a file transfer, or 0(zero) to disable sending NOOP commands during a file transfer.</value>        
        </member>
        <member name="P:ComponentPro.Net.Ftp.KeepAliveDuringIdleInterval">
            <summary>
            Gets or sets the length of the interval, in seconds, between NOOP commands sent by 
            <see cref="M:ComponentPro.Net.Ftp.GetConnectionState(System.Boolean@,System.Int32@)"/> while idle. Set to 0 to disable sending NOOP commands.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.MaxDownloadSpeed">
            <summary>
            Gets or sets the maximum allowed download speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed download speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.MaxUploadSpeed">
            <summary>
            Gets or sets the maximum allowed upload speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed upload speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Passive">
            <summary>
            Gets or sets a boolean value indicating if the FTP client should initiate the data connection rather than the FTP server.
            </summary>
            <value>The file transfer type. Default is true (passive).</value>
            <remarks>
            <p>
            When using HTTP CONNECT proxy, this property is ignored and all transfers are passive.
            </p>
            <p>
            If set to true (Passive mode), the PASV command will be sent to the FTP server rather than the PORT command resulting in the FTP server "listening" on a data port (other than its default) and waiting for a data connection to be established by the FTP client. 
            </p>
            <p>
            If set to false (Active mode), the PORT command will be sent and the FTP client will be listening for an incoming data connection. The FTP server will establish the data connection upon receipt of a transfer command. The reply to the PASV command includes the host and port address the FTP server is listening on. 
            </p>
            <p>
            If you are having issues connecting or sending and receiving files to and from a server, try setting the Passive property to true. 
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.TransferMode">
            <summary>
            Gets or sets the data transfer mode.
            </summary>
            <value>The file transfer mode. Default is <see cref="T:ComponentPro.Net.FtpTransferMode">Stream</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.TransferType">
            <summary>
            Gets or sets the data transfer type.
            </summary>
            <value>The file transfer type. Default is <see cref="T:ComponentPro.IO.FileTransferType">Binary</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Proxy">
            <summary>
            Gets or sets the proxy information to use for connecting and/or logging in through a proxy server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.FtpProxy" /> to use to access a remote server.</value>
            <example source="FtpProxy"/>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Config">
            <summary>
            Gets or sets FTP object settings.
            </summary>
            <value>FTP object settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UploadBufferSize">
            <summary>
            Gets or sets the upload buffer size in bytes. The range is from 1KB to 16MB. Default is 64KB (4KB on .NET Compact Framework).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DownloadBufferSize">
            <summary>
            Gets or sets the download buffer size in bytes. The range is from 1KB to 16MB. Default is 64KB.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SupportedFeatures">
            <summary>
            Gets the bit field specifying the features supported by the server.
            </summary>
            <value>Features supported by the server.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.EnabledFeatures">
            <summary>
            Gets or sets the bit field specifying the enabled features.
            </summary>
            <value>Enabled features.</value>
            <remarks>
            Enabled features will be used when appropriate.
            By default, all features are enabled.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SetFilePermissionsCompleted">
            <summary>
            Occurs after a <see cref="O:SetFilePermissionsAsync"/> call has been completed.
            </summary>
            <example source="SetFilePermissions_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsCompleted">
            <summary>
            Occurs after a <see cref="O:SetMultipleFilesPermissionsAsync"/> call has been completed.
            </summary>
            <example source="SetMultipleFilesPermissions_Async"/>
        </member>
        <member name="T:ComponentPro.Net.FtpFileInfoParseEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.FtpFileInfo.ItemParse">ItemParse</see> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoParseEventArgs.#ctor(System.ComponentModel.AsyncOperation,System.String,ComponentPro.Net.FtpFileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoParseEventArgs"/> class with the specified raw data and a parsed item.
            </summary>
            <param name="rawLine">Raw data of the line parsed.</param>
            <param name="item">Parsed <see cref="T:ComponentPro.Net.FtpFileInfo"/> or <b>null</b> reference if unable to parse.</param>
            <param name="asyncOp">Async operation object.</param>
            <remarks>
            This provides support for custom list parsing. Custom parser delegate can
            inspect the rawLine parameter and set <see cref="P:ComponentPro.Net.FtpFileInfoParseEventArgs.Item"/> property to a new <see cref="T:ComponentPro.Net.FtpFileInfo"/> instance.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoParseEventArgs.RawLine">
            <summary>
            Gets the raw data of the line parsed.
            </summary>
            <value>The raw data of the line parsed.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoParseEventArgs.Item">
            <summary>
            Gets or sets the parsed <see cref="T:ComponentPro.Net.FtpFileInfo"/>.
            </summary>
            <value>The parsed <see cref="T:ComponentPro.Net.FtpFileInfo"/> or <b>null</b> if unable to parse.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpListItemReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Ftp.ListItemReceived"/> event.
            </summary>
            <example source="GeneralEvents/ListItemReceived"/>
        </member>
        <member name="M:ComponentPro.Net.FtpListItemReceivedEventArgs.Ignore">
            <summary>
            Ignores the current item, making it not appear on the list.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpListItemReceivedEventArgs.Abort">
            <summary>
            Aborts the process of receving the file and directory listing.
            </summary>
            <remarks>Calling <see cref="M:ComponentPro.Net.FtpListItemReceivedEventArgs.Abort"/> will not ignore the last recieved item.
            You have to call <see cref="M:ComponentPro.Net.FtpListItemReceivedEventArgs.Ignore"/> prior to calling <see cref="M:ComponentPro.Net.FtpListItemReceivedEventArgs.Abort"/>
            if you don't want to have the last recieved item in your list.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpListItemReceivedEventArgs.ListingType">
            <summary>
            Gets the listing type.
            </summary>
            <value>Listing type.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpListItemReceivedEventArgs.RawLine">
            <summary>
            Gets the raw data of the received item line.
            </summary>
            <value>The raw data of the received item line.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpListItemReceivedEventArgs.File">
            <summary>
            Gets the received <see cref="T:ComponentPro.Net.FtpFileInfo"/>.
            </summary>
            <value>The received <see cref="T:ComponentPro.Net.FtpFileInfo"/> or <b>null</b> if not available.</value>
            <remarks>To remove this item from the list, set this property to null.</remarks>
        </member>
        <member name="T:ComponentPro.Net.FtpFileInfoCollection">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/> objects.
            </summary>
            <example source="ListDirectory"/>	
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection"/> class with the specified file list.
            </summary>
            <param name="rawList">The unparsed FTP file list.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor(System.String[],ComponentPro.Net.FtpListingType)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection"/> class with the specified file list.
            </summary>
            <param name="rawList">The unparsed FTP file list.</param>
            <param name="listingType">Type of the listing.</param>
        </member>
        <member name="T:ComponentPro.Net.FtpConfig">
            <summary>
            Specifies various FTP settings.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.ClearStateOnError">
            <summary>
            Indicates whether to read any remaining data and set the <see cref="P:ComponentPro.Net.Ftp.State"/> to <see cref="F:ComponentPro.IO.RemoteFileSystemState.Ready"/> after encountering an <see cref="T:ComponentPro.Net.FtpException"/> error.
            </summary>
            <remarks>
            Set this property to <c>true</c> to automatically read remaining messages from the FTP server and 
            set the <see cref="P:ComponentPro.Net.Ftp.State"/> property back to the <see cref="F:ComponentPro.IO.RemoteFileSystemState.Ready"/> state after a command has been sent to the server but no response received so far.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.HighSpeedNetworkOptimization">
            <summary>
            Indicates whether to enable features, including using large buffers, for high-speed network connection. 
            Setting this property to <c>true</c> may improve the transfer speed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.StorCommand">
            <summary>
            Gets or sets the FTP command for uploading files. STOR is used by default.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.ForceMdtm">
            <summary>
            Indicates whether to force the library to always use the MDTM command in the <see cref="M:ComponentPro.Net.Ftp.GetLastWriteTime(System.String)"/> method instead of MLST. The default value is <c>false</c> - use MLST when available.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.As400DateFormat">
            <summary>
            Gets or sets the listing date format on AS/400-like systems. 'D' represents day in the format; 'M' represents month; and 'Y' represents year. For example, Format 'DMY' represents 'day,month,year'.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.DisableAs400NameFormatCommand">
            <summary>
            Gets or sets a value indicating whether to use `SITE NAMEFMT 1` command when the current filesystem is AS/400.
            The default value is <c>false</c> - to use `SITE NAMEFMT 1` command.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.SslExplicitAuthType">
            <summary>
            Gets or sets the type of initialization for explicit TLS/SSL mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.SslReuseSessionsForDataTransfers">
            <summary>
            Gets or sets a value indicating whether to reuse secure sessions for data transfers. The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.SendTelnetInterruptSignal">
            <summary>
            Gets or sets a value indicating whether to send Telnet interrupt signal to an FTP server when aborting a download. 
            RFC 959 and RFC 1123 recommend sending IP and Synch signals before the ABOR command. Sending the signal allows an FTP server to be notified that the connection will be terminated.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.SendAbortCommand">
            <summary>
            Gets or sets a boolean value indicating whether to send the ABOR command when aborting a download.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.ReuseSecureConnectionSession">
            <summary>
            Indicates whether to re-use the secure control connection session when connecting to the server or upgrading the connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_E3M">
            <summary>
            This option is deprecated and should no longer be used.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_F3M">
            <summary>
            Indicates whether to force the CCC command behavior. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.DetectFeatures">
            <summary>
            Gets or sets a boolean value indicating whether to send FEAT command to detect features of the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_G3M">
            <summary>
            Gets or sets a boolean value indicating whether to override an IP address announced by the server in response to PASV command with an IP used by the control connection. This property is only used when not connected through a proxy.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_H3M">
            <summary>
            Disables a workaround for FTP servers that announce private range IP addresses even though
            a public IP was used to connect to them. By default, when such server is detected,
            an IP address announced by the server in response to PASV command used is overrode 
            with an IP used by the control connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_J3M">
            <summary>
            Gets or sets a boolean value indicating whether to pause before closing the encrypted upload.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.ListHiddenFiles">
            <summary>
            Gets or sets a boolean value indicating whether to use "LIST -la" instead of "LIST" in <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/> and <see cref="O:ComponentPro.Net.Ftp.ListRawName"/> methods.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_K3M">
            <summary>
            Gets or sets a boolean value indicating whether to enable reading and throwing out any unexpected incoming responses when sending an FTP command.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_M3M">
            <summary>
            Gets or sets a boolean value indicatings whether to make the passive mode transfer initialize the connection only after the LIST/NLST/RETR/STOR command has been sent.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.UseListWhenSizeNotAvailable">
            <summary>
            Gets or sets a boolean value indicating whether to use "LIST" command to obtain file information when "SIZE" command is not supported.
            </summary>
            <value><c>true</c> to use "LIST" command to obtain file information when "SIZE" command is not supported; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_L3M">
            <summary>
            Gets or sets a value indicating whether to enable FACTS negotiation.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_N3M">
            <summary>
            Gets or sets a value indicating whether to use EPSV/EPRT commands to initiate a data channel.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_O3M">
            <summary>
            Gets or sets a value indicating whether to always resolve server name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.CompressionLevel">
            <summary>
            Gets or sets the compression level to compress the data sending to the server when the <see cref="P:ComponentPro.Net.Ftp.TransferMode"/> is <see cref="F:ComponentPro.Net.FtpTransferMode.Zlib"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpConfig.c_P3M">
            <summary>
            Gets or sets a boolean value indicating whether to always set the <see cref="P:ComponentPro.Net.FtpFileInfo.RawName"/> property for all <see cref="T:ComponentPro.Net.FtpFileInfo"/> in the listing result.
            </summary>
            <value><c>true</c> to always set the <see cref="P:ComponentPro.Net.FtpFileInfo.RawName"/> property for all <see cref="T:ComponentPro.Net.FtpFileInfo"/> in the listing result; otherwise, <c>false</c> to set that property only when calling the <see cref="O:ComponentPro.Net.Ftp.ListDirectory"/> methods. The default value is <c>false</c>.</value>
            <remarks>
            Set this to <c>false</c> to reduce memory footprint while excuting multi-file operations.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.FtpFileOs">
            <summary>
            Specifies detected FTP item system.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Unknown">
            <summary>
            Unknown OS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Unix">
            <summary>
            Unix.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Dos">
            <summary>
            Dos-like OS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.EpLf">
            <summary>
            EpLf.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Vms">
            <summary>
            Vms.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.VmsError">
            <summary>
            Buggy Vms.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Custom">
            <summary>
            Custom OS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Mlsd">
            <summary>
            MLSD.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Ibm4690">
            <summary>
            Ibm4690.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Zos">
            <summary>
            ZOS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.TandemGuardian">
            <summary>
            Tandem Guardian.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Transnet">
            <summary>
            Transnet.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.As400">
            <summary>
            As400-like system.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFileInfo">
            <summary>
            Contains information about a single file or directory on the FTP server.
            </summary>
            <example source="ListDirectory"/>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,System.String,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.DateTime,System.DateTime)">
            <param name="filename">The original name of the file or directory.</param>
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="fullName">The fully qualified name.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,ComponentPro.Net.FtpFileOs,System.String,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.Boolean,System.DateTime,System.DateTime,System.String,ComponentPro.Net.FtpFilePermissions,System.String,System.String)">
            <param name="filename">The original name of the file or directory.</param>
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="os">The server OS type.</param>
            <param name="fullName">The fully qualified name.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="isSymlink">A boolean value indicating whether the item is a symlink.</param>
            <param name="lastModified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="creationTime">The <see cref="T:System.DateTime"/> of item creation.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
            <param name="group">The group name of the file.</param>
            <param name="owner">The owner name of the file.</param>
            <param name="permissions">The permissions of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,ComponentPro.Net.FtpFileOs,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="os">The type of the item.</param>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="lastModified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="creationTime">The creation time.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,ComponentPro.Net.FtpFileOs,System.String,System.Int64,ComponentPro.Net.FtpFileType)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="os">The type of the item.</param>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,System.String,ComponentPro.Net.FtpFileOs,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.Boolean,System.DateTime,System.DateTime,System.String,ComponentPro.Net.FtpFilePermissions,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="fullName">The name of the file or directory.</param>
            <param name="os">The type of the item.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="isSymlink">A boolean value indicating whether the item is a symlink.</param>
            <param name="rawLine">A raw FTP list line.</param>
            <param name="lastModified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="creationTime">The creation time.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
            <param name="permissions">The attributes (permissions) of the file. may be null to indicate unknown permissions.</param>
            <param name="owner">The file owner.</param>
            <param name="group">The file group.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.Parse(ComponentPro.Net.Ftp,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class and initializes it with file info from a raw FTP list line.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="rawLine">A raw FTP list line.</param>
            <returns>An instance of <see cref="T:ComponentPro.Net.FtpFileInfo"/> or a null reference if unable to parse.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.Parse(ComponentPro.Net.Ftp,System.String,ComponentPro.Net.FtpListingType,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class and initializes it with file info from a raw FTP list line.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="rawLine">A raw FTP list line.</param>
            <param name="listingType">Type of the listing.</param>
            <param name="parseCurrentDir">Indicates whether to forcefully parse the current dir info.</param>
            <returns>An instance of <see cref="T:ComponentPro.Net.FtpFileInfo"/> or a null reference if unable to parse.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the item full name. All other information is not refreshed after assigning to a new path. To refresh the file information, call the <see cref="M:ComponentPro.IO.FileInfoBase.Refresh"/> method.
            </summary>
            <param name="newFullName">The new full path name.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.GetPermissionsString(ComponentPro.Net.FtpFilePermissions)">
            <summary>
            Returns permissions string.
            </summary>
            <param name="permissions">The permission.</param>
            <returns>The permissions string. It's like rwxr-xr-x.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.ApplyPropertiesFromSync(ComponentPro.IO.FileInfoBase,System.ComponentModel.AsyncOperation)">
            <summary>
            Copies the properties from the specified source file to this file.
            </summary>
            <param name="source">The source file object.</param>
            <param name="asyncOp">The async operation.</param>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.RefreshSync(System.ComponentModel.AsyncOperation)">
            <summary>
            Refreshes the current file object.
            </summary>
            <param name="asyncOp">The async operation.</param>
            <returns>true if the operation is successful otherwise false.</returns>
            <excludeall/>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.IsSameAs(ComponentPro.IO.FileInfoBase)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="target">The target to compare.</param>
            <returns><c>true</c> if the source and target objects represent the same physical entity; false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified sharing mode.
            </summary>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to read data from the file.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified sharing mode.
            </summary>
            <param name="overwrite">A boolean value indicating whether to overwrite the existing file; otherwise, new content will be appended to the end of the file.</param>
            <param name="share">The sharing mode. This parameter is not used.</param>
            <returns>A stream object that can be used to write data to the file.</returns>
        </member>
        <member name="E:ComponentPro.Net.FtpFileInfo.ItemParse">
            <summary>
            Occurs when an item is being parsed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <value>The name of the file or directory.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.OriginalPath">
            <summary>
            Gets the original name of the FTP item. The original name is the file path parameter passed to a method call.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Type">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Length">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.LastWriteTime">
            <summary>
            Returns the <see cref="T:System.DateTime"/> of last modification.
            </summary>
            <value>The <see cref="T:System.DateTime"/> of last modification.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.System">
            <summary>
            Gets the file system type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Permissions">
            <summary>
            The attributes (permissions) of the file.
            If None, the value was never assigned or succesfully parsed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.PermissionsString">
            <summary>
            Gets the permissions string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Owner">
            <summary>
            The owner of the file.
            If null, the value was never assigned or succesfully parsed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Group">
            <summary>
            Group identifier (Unix only).
            If null, the value was never assigned or succesfully parsed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsDirectory">
            <summary>
            Gets the flag indicating whether the item might be a directory.
            </summary>
            <value>True if the item might be a directory.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsFile">
            <summary>
            Gets the flag indicating whether the item might be a file.
            </summary>
            <value>True if the item might be a file.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsSymlink">
            <summary>
            Gets the flag indicating whether the item is a symlink.
            </summary>
            <value>True if the item is a symlink.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.CreationTime">
            <summary>
            Gets the item creation time.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.LastAccessTime">
            <summary>
            Not supported property. Always returns DateTime.MinValue.
            </summary>
            <exclude/>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FullName">
            <summary>
            Gets the fully qualified name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.RawName">
            <summary>
            Gets the FTP Item's raw name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Attributes">
            <summary>
            Gets the file attributes. Only <b>Directory</b> and <b>Normal</b> are available.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpWebRequest">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            <example source="FtpWebRequest"/>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.CommandResponse"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnStateChanged(System.Object,ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnProgress(System.Object,ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.Progress"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.Abort">
            <summary>
            Cancels an asynchronous FTP request.
            </summary>
            <remarks>
            Abort cancels an asynchronous FTP request. After a request is canceled, calling
            <see cref="M:ComponentPro.Net.FtpWebRequest.GetResponse" />, <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" />,
            <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />, or <see cref="M:ComponentPro.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)" /> will cause a <see cref="T:System.Net.WebException" />
            with <see cref="P:System.Net.WebException.Status">Status</see> set to <see cref="T:System.Net.WebExceptionStatus">RequestCanceled</see>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a <see cref="T:System.IO.Stream" /> instance to use to write data.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a <see cref="T:ComponentPro.Net.FtpWebResponse" /> instance to use to write data.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous request for a <see cref="T:System.IO.Stream" /> instance.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, returns the <see cref="T:System.IO.Stream" /> to use to write data.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous request for a <see cref="T:ComponentPro.Net.FtpWebResponse" /> instance.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, returns the <see cref="T:System.Net.WebResponse" />.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream" /> instance to use to write request data.
            </summary>
            <returns>A <see cref="T:System.IO.Stream" /> to use to write request data.</returns>
            <remarks>
            <p>The <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" /> method returns a stream to use to send data for the <see cref="T:ComponentPro.Net.FtpWebRequest" />. Once the <see cref="T:System.IO.Stream" /> instance has been returned, you can send data with the <see cref="T:ComponentPro.Net.FtpWebRequest" /> by using the <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> method.</p>
            <p><b>Note:</b> Unlike <see cref="T:System.Net.HttpWebRequest" />, you do not have to set the value of the <see cref="P:ComponentPro.Net.FtpWebRequest.ContentLength" /> property before writing data to the stream. <see cref="P:ComponentPro.Net.FtpWebRequest.ContentLength" /> is ignored.</p>
            <p><b>CAUTION:</b> You must call the <see cref="M:System.IO.Stream.Close" /> method to close the stream and release the connection for reuse. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.GetResponse">
            <summary>
            Returns <see cref="T:System.Net.WebResponse" /> instance to use to write data.
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse" /> containing the response.</returns>
            <remarks>
            The actual instance returned is an instance of <see cref="T:ComponentPro.Net.FtpWebResponse" />, and can be typecast to that class.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.FtpWebRequest.c_TKD">
            <summary>
            Occurs when data is send or received.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.CommandResponse">
            <summary>
            Occurs when a command is sent to the server or a response is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Ftp"/> object is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.Progress">
            <summary>
            Occurs when a block of data is sent or received.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.ContentLength">
            <summary>
            Gets or sets the Content-length HTTP header.
            </summary>
            <value>Not supported.</value>
            <remarks>Not supported by <see cref="T:ComponentPro.Net.FtpWebRequest" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.ContentType">
            <summary>
            Gets or sets the value of the Content-type HTTP header.
            </summary>
            <value>The value of the Content-type HTTP header.</value>
            <remarks>Not used by <see cref="T:ComponentPro.Net.FtpWebRequest" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Creator">
            <summary>
            Gets the instance of IWebRequestCreate for registering with WebRequest.Create.
            </summary>
            <value>The instance of IWebRequestCreate</value>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials" /> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential" /> are supported by <see cref="T:ComponentPro.Net.FtpWebRequest" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Headers">
            <summary>
            Gets or sets a collection of the name/value pairs that make up the HTTP headers.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection" /> containing the name/value pairs that make up the headers for the HTTP request.</value>
            <remarks>Not used by <see cref="T:ComponentPro.Net.FtpWebRequest" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Method">
            <summary>
            Gets or sets the method for the request.
            </summary>
            <value>The method for the request.</value>
            <remarks>
            <p>The Method property can be set to either RETR or STOR command. PUT and GET are also supported for compatibility with HttpWebRequest.</p>
            <p>Changing the Method property after the request has been started by calling <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" />, <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.GetResponse" />, or <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> method will throw an <see cref="T:System.InvalidOperationException" />.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.PreAuthenticate">
            <summary>
            Gets or sets a value indicating whether to send a preauthentication header with the request.
            </summary>
            <value>true to send a <b>WWW-authenticate</b> HTTP header with the initial request; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>Not used by <see cref="T:ComponentPro.Net.FtpWebRequest" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.FtpProxy" /> instance to use to proxy the request.</value>
            <remarks>
            <p>
            The Proxy property identifies the <see cref="T:ComponentPro.Net.FtpProxy" /> instance to use to process
            requests to Internet resources. To specify that no proxy should be used,
            set the Proxy property to the proxy instance returned by
            the <see cref="M:System.Net.GlobalProxySelection.GetEmptyWebProxy" /> method.
            </p>
            <p>
            If this property is not set to an instance of <see cref="T:ComponentPro.Net.FtpProxy" />, it is ignored.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.RequestUri">
            <summary>
            Gets the URI of the request.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.Uri)" /> method.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.SslSecurityMode">
            <summary>
            Gets or sets SSL mode.
            </summary>
            <summary>
            Gets or sets the SSL security mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Timeout">
            <summary>
            Gets or sets the time-out value (in milliseconds) for a request.
            </summary>
            <remarks>
            <p>
            The length of time, in milliseconds, until the request times out,
            or the value of -1 or 0 to indicate that the
            request does not time out. Default is -1.
            </p>
            <p>
            Timeout is the number of milliseconds that a synchronous request made
            with the <see cref="M:ComponentPro.Net.FtpWebRequest.GetResponse" /> method waits for a response, and the <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" />
            methods waits for a stream. If a resource does not respond within
            the time-out period, the request throws a <see cref="T:System.Net.WebException" /> with the <see cref="T:System.Net.WebExceptionStatus">Status</see>
            property set to <see cref="T:System.Net.WebExceptionStatus">Timeout</see>.
            </p>
            <p>
            The Timeout property has no effect on asynchronous requests made with
            the <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> or <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> methods.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.SslConfigBase">
            <summary>
            Gets or sets TLS/SSL security parameters.
            </summary>
            <value>Security parameters.</value>
        </member>
        <member name="T:c_H9M">
            <summary>
            Handles all control channel communication with an FTP server.
            </summary>
        </member>
        <member name="T:c_J9M">
            <summary>
            Base class for FTP streams.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpException">
            <summary>
            The exception that is thrown when an error occurs while using Ftp component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified <see cref="T:ComponentPro.Net.FtpResponse" />.
            </summary>
            <param name="response">The <see cref="T:ComponentPro.Net.FtpResponse" />.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,ComponentPro.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,System.Exception,ComponentPro.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpException.c_QGL">
            <summary>
            Indicates that the operation was aborted while waiting for response and the object was left in an unusable state.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpException.LocalPath">
            <summary>
            Gets the path of the local file or directory which is currently processed or null (Nothing in Visual Basic) if not available.
            </summary>
            <value>Path of the local file or directory which is currently processed or null (Nothing in Visual Basic) if not available.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpException.RemotePath">
            <summary>
            Gets the path of the remote file or directory which is currently processed or null (Nothing in Visual Basic) if not available.
            </summary>
            <value>Path of the remote file or directory which is currently processed or null (Nothing in Visual Basic) if not available.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Response">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.FtpResponse" /> of the exception.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.FtpResponse" /> if <see cref="P:ComponentPro.Net.FtpException.Status" /> is <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>; <b>null</b> reference otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Transfered">
            <summary>
            Gets the amount of data transferred before the exception occurred.
            </summary>
            <value>The amount of data transferred before the exception occurred.</value>
            <remarks>This method is now deprecated. Please use the TransferType property instead.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Transferred">
            <summary>
            Gets the amount of data transferred before the exception occurred.
            </summary>
            <value>The amount of data transferred before the exception occurred.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.FtpException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.Pending">
            <summary>
            An operation is pending.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an FTP protocol error such as 550 Access Denied would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server due to an error at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.OperationAborted">
            <summary>
            The operation was aborted by a call to the <see cref="O:ComponentPro.Net.Ftp.Cancel" /> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.FtpException.Status" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.SendFailure">
            <summary>
            A complete request could not be sent to the remote server due to an error at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid FTP response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.OperationFailed">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFeatures">
            <summary>
            FTP extensions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.MachineProcessingList">
            <summary>
            MLST extension (MLST and MLSD commands) - directory and file listings for machine processing.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.ModifyFileModificationTime">
            <summary>
            MFMT extension - modify the last modification time of a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.PreTransferCommand">
            <summary>
            PRET extension - PRE Transfer Command for Distributed PASV Transfers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.SetSecuredClientNegotiation">
            <summary>
            SSCN extension - set secured client negotiation.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.CrcChecksum">
            <summary>
            XCRC extension - get CRC checksum of a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.MD5Hash">
            <summary>
            XMD5 extension - get MD5 hash of a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.SHA1Hash">
            <summary>
            XSHA extension - get SHA1 hash of a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.ModeZlib">
            <summary>
            MODE Z transfer compression.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.Host">
            <summary>
            HOST command.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.UTF8">
            <summary>
            UTF-8 name encoding.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFeatures.All">
            <summary>
            All extensions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFilePermissions">
            <summary>
            Unix file permissions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.None">
            <summary>No permissions.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicExecute">
            <summary>Others execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicWrite">
            <summary>Others write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicRead">
            <summary>Others read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupExecute">
            <summary>Group execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupWrite">
            <summary>Group write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupRead">
            <summary>Group read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerExecute">
            <summary>Owner execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerWrite">
            <summary>Owner write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerRead">
            <summary>Owner read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.Sticky">
            <summary>Sticky.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.SetGid">
            <summary>Set GID bit.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.SetUid">
            <summary>Set UID bit.</summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFileType">
            <summary>
            Type of <see cref="T:ComponentPro.Net.FtpFileInfo" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.File">
            <summary>File</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.Directory">
            <summary>Directory</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.Symlink">
            <summary>Symlink</summary>
        </member>
        <member name="T:ComponentPro.Net.FtpListingType">
            <summary>
            Type of file and directory listing.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingType.List">
            <summary>Classic method - the LIST command.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingType.MachineProcessingList">
            <summary>New method - the MLSD command.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingType.NameList">
            <summary>Name list only - the NLST command. Beware, behavior is not consistent across different FTP servers. See <see cref="O:ComponentPro.Net.Ftp.ListName" /> remarks for more information.</summary>
        </member>
        <member name="T:c_Q3M">
            <summary>
            Static methods for FTP LIST parsing.
            </summary>
        </member>
        <member name="T:c_F0M">
            <summary>
            Provides methods for parsing FTP server responses.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpProxy">
            <summary>
            Contains proxy settings for <see cref="T:ComponentPro.Net.Ftp" /> and <see cref="T:ComponentPro.Net.FtpWebRequest" /> classes.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:System.Net.WebProxy" /> class.
            </summary>
            <remarks>
            The default constructor initializes an empty instance of the <see cref="T:ComponentPro.Net.FtpProxy" />
            class with the <see cref="P:ComponentPro.Net.FtpProxy.ProxyType" /> property set to <see cref="T:ComponentPro.Net.FtpProxyType">FtpProxyType.None</see>.
            When the <see cref="P:ComponentPro.Net.FtpProxy.ProxyType" /> is set to <see cref="T:ComponentPro.Net.FtpProxyType">FtpProxyType.None</see>, the <see cref="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)" /> method
            returns <b>true</b>, and the <see cref="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)" /> method returns the destination address.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, and port.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, port, and username.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, port, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.Boolean,System.String[],System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.Clone">
            <summary>
            Creates a copy of the <see cref="T:ComponentPro.Net.FtpProxy" /> instance.
            </summary>
            <returns>A new <see cref="T:ComponentPro.Net.FtpProxy" /> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.CreateClone">
            <summary>
            Creates the true type of the clone.
            </summary>
            <returns>If overridden in derived class, return the derived class instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.GetProxyAddress">
            <summary>
            Gets the proxy address.
            </summary>
            <returns>Returns the proxy address with the correct schema applied.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.IsBypassed(System.String,System.Int32)">
            <summary>
            Indicates whether to use the proxy server for the specified FTP server.
            </summary>
            <param name="hostName">The address of the FTP server to check for proxy use.</param>
            <param name="port">The port port.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.ToString">
            <summary>
            Returns a string representation of this proxy.
            </summary>
            <returns>String representation of this proxy.</returns>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.AuthenticationMethod">
            <summary>
            Gets or sets the proxy server authentication method.
            </summary>
            <value>The type of the proxy server authentication method.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpProxyType">
            <summary>
            Type of proxy to use to connect to the network.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.None">
            <summary>Direct connection.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks4">
            <summary>Connection through Socks4 proxy.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks4A">
            <summary>Connection through Socks4A proxy (capable of resolving domain names).</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks5">
            <summary>Connection through Socks5 proxy.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.HttpConnect">
            <summary>Connection through HTTP proxy using CONNECT method.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Site">
            <summary>Connection through FTP proxy using SITE command.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.User">
            <summary>Connection through FTP proxy using a single USER/PASS command.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Open">
            <summary>Connection through FTP proxy using OPEN command.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.DoubleLogin">
            <summary>Connection through FTP proxy using two separate USER/PASS commands
            (one USER command for logging in the proxy and the second USER command for logging in the FTP server).</summary>
        </member>
        <member name="T:ComponentPro.Net.FtpResponse">
            <summary>
            Contains the response of the FTP server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpResponse.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpResponse" /> class with the specified code, description and raw response string.
            </summary>
            <param name="code">The FTP response code. Must be in range of 100 to 599.</param>
            <param name="description">The description of the response code.</param>
            <param name="raw">Raw FTP response.</param>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.Code">
            <summary>
            Gets the FTP response code.
            </summary>
            <value>FTP response code.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.Description">
            <summary>
            Gets the description of the FTP response.
            </summary>
            <value>The description of the FTP response.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.Group">
            <summary>
            Gets the group of the FTP response code.
            </summary>
            <value>The group of the FTP response code.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.RawResponse">
            <summary>
            Gets the full unparsed response of the FTP server.
            </summary>
            <value>The full unparsed response of the FTP server.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpServerType">
            <summary>
            Defines well-known FTP servers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Unknown">
            <summary>
            Unclassifiable FTP server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.GlobalScape">
            <summary>
            GlobalScape.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.ConnectEnterpriseUnix">
            <summary>
            Connect Enterprise Unix.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.WsFtp">
            <summary>
            WsFtp.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Nofeel">
            <summary>
            Nofeel.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.FileZilla">
            <summary>
            FileZilla.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Gene6">
            <summary>
            Gene6.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.MsFtp7">
            <summary>
            MsFtp 7.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Tumbleweed">
            <summary>
            Tumbleweed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.MsFtp5">
            <summary>
            MsFtp5.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Xfb">
            <summary>
            Xfb.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Zftp">
            <summary>
            Zftp.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Servu">
            <summary>
            Servu.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.VsFtpd">
            <summary>
            VsFtpd.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.VShell">
            <summary>
            VShell.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.EdiPubnet">
            <summary>
            EdiPubnet.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Raiden">
            <summary>
            Raiden.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.ProFtpd">
            <summary>
            ProFtpd.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.As400">
            <summary>
            As400.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.Cerberus">
            <summary>
            Cerberus.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.CoreFtp">
            <summary>
            CoreFtp.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpServerType.WuFtpd28">
            <summary>
            WuFtpd.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpSslExplicitAuthType">
            <summary>
            Type of TLS/SSL initialization.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpSslExplicitAuthType.TLS">
            <summary>
            Use "AUTH TLS" command to secure the connection.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpSslExplicitAuthType.SSL">
            <summary>
            Use "AUTH SSL" command to secure the connection.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpSslExplicitAuthType.Any">
            <summary>
            Try "AUTH TLS" first and try "AUTH SSL" if it fails.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpSslExplicitAuthType.TumbleweedTunnel">
            <summary>
            Tumbleweed custom 'SSL tunnel' mode.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpTransferMode">
            <summary>
            Transfer mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.Stream">
            <summary>Stream mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.Zlib">
            <summary>Compressed stream mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.Block">
            <summary>Block mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.FtpWebResponse">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebResponse" /> class.
            </summary>
            <remarks>
            The <see cref="T:ComponentPro.Net.FtpWebResponse" /> class contains support for the properties
            and methods included in <see cref="T:System.Net.WebResponse" />.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebResponse.Close">
            <summary>
            Closes the response stream.
            </summary>
            <remarks>
            <p>The Close method closes the response stream and releases the connection to the FTP server for reuse by other requests</p>
            <p><b>CAUTION:</b> You must call either the <see cref="M:System.IO.Stream.Close" /> or the FtpWebResponse.Close method to close the stream and release the connection for reuse. It is not necessary to call both Stream.Close and FtpWebResponse.Close, but doing so does not cause an error. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebResponse.GetResponseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream" /> used to read the body of the response from the server.
            </summary>
            <returns>A <see cref="T:System.IO.Stream" /> user to read the body of the response.</returns>
            <remarks>
            <p><b>CAUTION:</b> You must call either the <see cref="M:System.IO.Stream.Close" /> or the FtpWebResponse.Close method to close the stream and release the connection for reuse. It is not necessary to call both Stream.Close and FtpWebResponse.Close, but doing so does not cause an error. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request.
            </summary>
            <value>The number of bytes returned by the request.</value>
            <remarks>Not supported by <see cref="T:ComponentPro.Net.FtpWebResponse" />.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
            <value>A content type of the response.</value>
            <remarks><see cref="T:ComponentPro.Net.FtpWebResponse" /> always returns "binary/octet-stream".</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.Headers">
            <summary>
            Gets the headers associated with this response from the server.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection" /> containing the header information returned with the response.</value>
            <remarks><see cref="T:ComponentPro.Net.FtpWebResponse" /> always returns an empty collection.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ResponseUri">
            <summary>
            Gets the URI of the request.
            </summary>
            <value>A URI of the request.</value>
        </member>
        <member name="T:c_XML">
            <summary>
            Encapsulation of FTP stream.
            </summary>
        </member>
    </members>
</doc>
